<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>修改vue的keep-alive实现仿easyui-页面tab切换</title>
      <link href="/2017/10/27/vue-tab-look-like-easyui/"/>
      <content type="html"><![CDATA[<h2 id="后台管理页面通常会有tabs切换作为导航"><a href="#后台管理页面通常会有tabs切换作为导航" class="headerlink" title="后台管理页面通常会有tabs切换作为导航"></a>后台管理页面通常会有tabs切换作为导航</h2><h3 id="常见实现方式"><a href="#常见实现方式" class="headerlink" title="常见实现方式"></a>常见实现方式</h3><ol><li>通过显示和隐藏div（缺点：无法看到路由）</li><li>通过iframe，其实和显示隐藏区别不大<h3 id="vue实现方式"><a href="#vue实现方式" class="headerlink" title="vue实现方式"></a>vue实现方式</h3>因为要在vue中实现，用vue-router和vue中一个keep-alive，但是keep-alive有个缺点，他是用对象来缓存组件，并且是一个抽象组件，所以就稍微修改下。</li></ol><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/2017/10/27/vue-tab-look-like-easyui/navigation.png" alt="navigation"></p><a id="more"></a><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol><li>点击左侧显示toolbar nav</li><li>通过toolbar 切换路由，并保持之前缓存</li><li>关闭toolbar清除缓存，打开后仍可用缓存</li></ol><h3 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h3><p><a href="https://github.com/slipkinem/vue-admin" target="_blank" rel="noopener">https://github.com/slipkinem/vue-admin</a></p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>监听路由的变动，当路由改变时将当前路由添加到一个列表里面。循环此列表生成<strong>toolbar</strong>的<code>tabs</code>，给keep-alive添加两个方法。第一个是当<strong>keep-alive</strong>工作的时候，设置存储<code>key</code>的<strong>hook</strong>、第二个方法添加通过<code>key</code>删除缓存<code>removeCacheByKey</code>。<br>当点击关闭按钮的时候，调用<code>removeCacheByKey</code>就可以完美解决vue keep-alive无法主动清除缓存的问题了。主要的keep-alive代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDef</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val !== <span class="literal">undefined</span> &amp;&amp; val !== <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstComponentChild</span> (<span class="params">children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> c = children[i]</span><br><span class="line">      <span class="keyword">if</span> (isDef(c) &amp;&amp; isDef(c.componentOptions)) &#123;</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComponentName</span> (<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> opts &amp;&amp; (opts.Ctor.options.name || opts.tag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matches</span> (<span class="params">pattern, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(pattern)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.indexOf(name) &gt; <span class="number">-1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> pattern === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.split(<span class="string">','</span>).indexOf(name) &gt; <span class="number">-1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_.isRegExp(pattern)) &#123;</span><br><span class="line">    <span class="keyword">return</span> pattern.test(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCache</span> (<span class="params">cache, current, filter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">    <span class="keyword">const</span> cachedNode = cache[key]</span><br><span class="line">    <span class="keyword">if</span> (cachedNode) &#123;</span><br><span class="line">      <span class="keyword">const</span> name = getComponentName(cachedNode.componentOptions)</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; !filter(name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cachedNode !== current) &#123;</span><br><span class="line">          pruneCacheEntry(cachedNode)</span><br><span class="line">        &#125;</span><br><span class="line">        cache[key] = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pruneCacheEntry</span> (<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vnode) &#123;</span><br><span class="line">    vnode.componentInstance.$destroy()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'pk-keep-alive'</span>,</span><br><span class="line"></span><br><span class="line">  props: &#123;</span><br><span class="line">    include: [],</span><br><span class="line">    exclude: [],</span><br><span class="line">    updateComponentsKey: <span class="built_in">Function</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="comment">// vue的keep-alive存储对象</span></span><br><span class="line">    <span class="keyword">this</span>.cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 调用keep-alive组件销毁钩子，组件销毁的时候同时清除缓存</span></span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">this</span>.cache) &#123;</span><br><span class="line">      pruneCacheEntry(<span class="keyword">this</span>.cache[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line">    include (val) &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>.cache, <span class="keyword">this</span>._vnode, name =&gt; matches(val, name))</span><br><span class="line">    &#125;,</span><br><span class="line">    exclude (val) &#123;</span><br><span class="line">      pruneCache(<span class="keyword">this</span>.cache, <span class="keyword">this</span>._vnode, name =&gt; !matches(val, name))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> vnode = getFirstComponentChild(<span class="keyword">this</span>.$slots.default)</span><br><span class="line">    <span class="keyword">const</span> componentOptions = vnode &amp;&amp; vnode.componentOptions</span><br><span class="line">    <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">      <span class="comment">// check pattern</span></span><br><span class="line">      <span class="keyword">const</span> name = getComponentName(componentOptions)</span><br><span class="line">      <span class="keyword">if</span> (name &amp;&amp; (</span><br><span class="line">          (<span class="keyword">this</span>.include &amp;&amp; !matches(<span class="keyword">this</span>.include, name)) ||</span><br><span class="line">          (<span class="keyword">this</span>.exclude &amp;&amp; matches(<span class="keyword">this</span>.exclude, name))</span><br><span class="line">        )) &#123;</span><br><span class="line">        <span class="keyword">return</span> vnode</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> key = vnode.key == <span class="literal">null</span></span><br><span class="line">        <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">        <span class="comment">// so cid alone is not enough (#3269)</span></span><br><span class="line">        ? componentOptions.Ctor.cid + (componentOptions.tag ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">        : vnode.key</span><br><span class="line">        <span class="comment">// 添加获取key的外部hook</span></span><br><span class="line">      <span class="keyword">this</span>.updateComponentsKey &amp;&amp; <span class="keyword">this</span>.updateComponentsKey(key)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.cache[key]) &#123;</span><br><span class="line">        vnode.componentInstance = <span class="keyword">this</span>.cache[key].componentInstance</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.cache[key] = vnode</span><br><span class="line">      &#125;</span><br><span class="line">      vnode.data.keepAlive = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 通过cache的key删除对应的缓存</span></span><br><span class="line">    removeCacheByKey (key) &#123;</span><br><span class="line">      pruneCacheEntry(<span class="keyword">this</span>.cache[key])</span><br><span class="line">      <span class="keyword">this</span>.cache[key] = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> tabs </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记-职责链模式</title>
      <link href="/2017/08/23/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><ol><li>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。<ul><li>你去政府部门求人办事过吗？有时候你会遇到过官员踢球推责，你的问题在我这里能解决就解决，<br>不能解决就推卸给另外个一个部门（对象）。<br>至于到底谁来解决这个问题呢？政府部门就是为了可以避免屁民的请求与官员之间耦合在一起，<br>让多个（部门）对象都有可能接收请求，将这些（部门）对象连接成一条链，并且沿着这条链传递请求，直到有（部门）对象处理它为止。</li></ul></li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送请求</span></span><br><span class="line"><span class="comment"> * @param data</span></span><br><span class="line"><span class="comment"> * @param dealType</span></span><br><span class="line"><span class="comment"> * @param dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sendData = <span class="function"><span class="keyword">function</span> (<span class="params">data, dealType, dom</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(),</span><br><span class="line">    url = <span class="string">'getData.php?mod=userInfo'</span></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status === <span class="number">304</span>) &#123;</span><br><span class="line">      dealData(xhr.responseText, dealType, dom)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 失败</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">    url += <span class="string">'&amp;'</span> + i + <span class="string">'='</span> + data[i]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line">  xhr.send(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理响应数据</span></span><br><span class="line"><span class="comment"> * @param data</span></span><br><span class="line"><span class="comment"> * @param dealType</span></span><br><span class="line"><span class="comment"> * @param dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> dealData = <span class="function"><span class="keyword">function</span> (<span class="params">data, dealType, dom</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dataType = <span class="built_in">Object</span>.prototype.toString.call(data)</span><br><span class="line">  <span class="keyword">switch</span> (dealType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'sug'</span>:</span><br><span class="line">      <span class="keyword">if</span> (dataType === <span class="string">'[object Array]'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> createSug(data, dom)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (dataType === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> newData = []</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">          newData.push(data[i])</span><br><span class="line">          <span class="keyword">return</span> createSug(newData, dom)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> createSug([data], dom)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'validate'</span>:</span><br><span class="line">      <span class="keyword">return</span> createValidateResult(data, dom)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提示框组件</span></span><br><span class="line"><span class="comment"> * @param data</span></span><br><span class="line"><span class="comment"> * @param dom</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> createSug = <span class="function"><span class="keyword">function</span> (<span class="params">data, dom</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = data.length,</span><br><span class="line">    html = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    html += <span class="string">'&lt;li&gt;'</span> + data[i] + <span class="string">'&lt;/li&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dom.parentNode.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>].innerHTML = html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createValidateResult = <span class="function"><span class="keyword">function</span> (<span class="params">data, dom</span>) </span>&#123;</span><br><span class="line">  dom.parentNode.getElementsByTagName(<span class="string">'span'</span>)[<span class="number">0</span>].innerHTML = data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--策略模式</title>
      <link href="/2017/08/22/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ol><li>将定义的一组算法封装起来，使其可以相互替换。封装的算法彼此之间独立，不会随着客户端的变化而变化<ul><li>通过定义算法返回结果，和状态模式不同的是，没有对象的依赖</li></ul></li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="comment">// 实现</span></span><br><span class="line">  <span class="keyword">var</span> PriceStrategy = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> strategy = &#123;</span><br><span class="line">      return30: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> +price + <span class="built_in">parseInt</span>(price / <span class="number">100</span>) * <span class="number">30</span></span><br><span class="line">      &#125;,</span><br><span class="line">      return50: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> +price + <span class="built_in">parseInt</span>(price / <span class="number">100</span>) * <span class="number">50</span></span><br><span class="line">      &#125;,</span><br><span class="line">      percent90: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">100</span> * <span class="number">90</span> / <span class="number">10000</span></span><br><span class="line">      &#125;,</span><br><span class="line">      percent80: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">100</span> * <span class="number">80</span> / <span class="number">10000</span></span><br><span class="line">      &#125;,</span><br><span class="line">      percent50: <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">100</span> * <span class="number">50</span> / <span class="number">10000</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doStrategy</span> (<span class="params">algorithm, price</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price)</span><br><span class="line">    &#125;</span><br><span class="line">    doStrategy.addStrategy = <span class="function"><span class="keyword">function</span> (<span class="params">field, fn</span>) </span>&#123;</span><br><span class="line">      strategy[field] = fn</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> doStrategy</span><br><span class="line">  &#125;)()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用</span></span><br><span class="line">  <span class="keyword">var</span> price = PriceStrategy(<span class="string">'return50'</span>, <span class="string">'346.5'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(price)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// jQuery的animate就是使用策略模式实现的，传入不同的参数，产生不一样的效果</span></span><br><span class="line">  <span class="comment">// $('div').animate(&#123; width: '200px' &#125;, 1000, 'linear')</span></span><br><span class="line">  <span class="comment">// $('div').animate(&#123; width: '200px' &#125;, 1000, 'swing')</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这个时候需要打6折怎么办？直接去改的话太麻烦,加上addStrategy方法</span></span><br><span class="line">  <span class="comment">// 执行</span></span><br><span class="line">  <span class="keyword">var</span> p = PriceStrategy(<span class="string">'percent80'</span>, <span class="string">'34343'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(p)</span><br><span class="line"></span><br><span class="line">  PriceStrategy.addStrategy(<span class="string">'test59'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price * <span class="number">1000000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> p = PriceStrategy(<span class="string">'test59'</span>, <span class="string">'3434'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(p)</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--状态模式</title>
      <link href="/2017/08/22/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><ol><li>当一个对象的内部状态发生改变时，会导致其行为的改变，看起来像是改变了对象<ul><li>当碰见需要多次判断某一个值得时候，不能确定是否还是会继续添加，就用状态模式，将判断的条件当做对象内部的一种状态</li></ul></li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="comment">// 实现</span></span><br><span class="line">  <span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)</span><br><span class="line">  <span class="keyword">var</span> ResultState = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> States = &#123;</span><br><span class="line">      state0: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'这是第一种情况'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      state1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'这是第二种情况'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      state2: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'这是第三种情况'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      state3: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'这是第四种情况'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">      States[<span class="string">'state'</span> + result] &amp;&amp; States[<span class="string">'state'</span> + result]()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      show</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用</span></span><br><span class="line">  ResultState().show(<span class="number">1</span>)</span><br><span class="line">  ResultState().show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模仿游戏的人物，执行的动作可以看做一种状态，游戏中的人物有时候需要连续执行多个动作</span></span><br><span class="line"><span class="comment">   * @constructor</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> MarryState = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _currentState = &#123;&#125;,</span><br><span class="line">      states = &#123;</span><br><span class="line">        jump: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          log(<span class="string">'jump'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        move: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          log(<span class="string">'move'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        shoot: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          log(<span class="string">'shoot'</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        squat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          log(<span class="string">'squat'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Action = &#123;</span><br><span class="line">      changeState: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">        _currentState = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (args.length) &#123;</span><br><span class="line">          args.forEach(<span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">            _currentState[arg] = <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;,</span><br><span class="line">      goes: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        log(<span class="string">'触发一次动作'</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> _currentState) &#123;</span><br><span class="line">          states[i] &amp;&amp; states[i]()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      change: Action.changeState,</span><br><span class="line">      goes: Action.goes</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> marry = <span class="keyword">new</span> MarryState()</span><br><span class="line"></span><br><span class="line">  marry</span><br><span class="line">    .change(<span class="string">'jump'</span>, <span class="string">'shoot'</span>)</span><br><span class="line">    .goes()</span><br><span class="line">    .goes()</span><br><span class="line">    .change(<span class="string">'shoot'</span>)</span><br><span class="line">    .goes()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--观察者模式</title>
      <link href="/2017/08/22/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ol><li>观察者模式又被称作发布-订阅模式，是一种消息机制，依靠事件很容易实现解耦<ul><li>观察者模式称为js最重要的设计模式都不为过</li><li>观察者模式实际是函数的回调，先将函数放入（订阅）容器中，发布的时候从容器中拿出执行</li></ul></li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)</span><br><span class="line">  <span class="comment">// 观察者模式实现</span></span><br><span class="line">  <span class="keyword">var</span> Observer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _messages = &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      regist: <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!_messages.hasOwnProperty(type)) &#123;</span><br><span class="line">          _messages[type] = [fn]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          [].push.call(_messages[type], fn)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      fire: <span class="function"><span class="keyword">function</span> (<span class="params">type, args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!_messages[type]) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">var</span> events = &#123;</span><br><span class="line">          type: type,</span><br><span class="line">          data: args || &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _messages[type].forEach(<span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">          message.call(<span class="keyword">this</span>, events.data)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      remove: <span class="function"><span class="keyword">function</span> (<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_messages[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> i = _messages[type].length - <span class="number">1</span></span><br><span class="line">          <span class="keyword">for</span> (; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            _messages[type][i] === fn &amp;&amp; _messages[type].splice(i, <span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> observer = Observer()</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">bitch</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'fuck '</span>, bitch)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用</span></span><br><span class="line">  observer.regist(<span class="string">'fuck'</span>, fn)</span><br><span class="line">  observer.regist(<span class="string">'gun'</span>, fn)</span><br><span class="line"></span><br><span class="line">  observer.fire(<span class="string">'fuck'</span>, <span class="string">'韩梅梅'</span>)</span><br><span class="line"></span><br><span class="line">  observer.remove(<span class="string">'fuck'</span>, fn)</span><br><span class="line"></span><br><span class="line">  observer.fire(<span class="string">'fuck'</span>, <span class="string">'dsfdsf'</span>)</span><br><span class="line"></span><br><span class="line">  observer.fire(<span class="string">'gun'</span>, <span class="string">'fuck'</span>)</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--模板方法模式</title>
      <link href="/2017/08/22/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ol><li>父类定义一组操作骨架，将一些具体的步骤放在子类中，使得子类不改变父类的情况下，实现多元化展现<ul><li>提供一个基础的弹框，外壳一样，但是里面的内容不一样，这就是模板方法的一种实现</li></ul></li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">noop</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * alert底层框架</span></span><br><span class="line"><span class="comment">   * @param data</span></span><br><span class="line"><span class="comment">   * @constructor</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">var</span> Alert = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.content = data.content</span><br><span class="line">    <span class="keyword">this</span>.panel = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="keyword">this</span>.contentNode = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</span><br><span class="line">    <span class="keyword">this</span>.confirmButton = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>)</span><br><span class="line">    <span class="keyword">this</span>.closeBtn = <span class="built_in">document</span>.createElement(<span class="string">'b'</span>)</span><br><span class="line">    <span class="keyword">this</span>.panel.className = <span class="string">'alert'</span></span><br><span class="line">    <span class="keyword">this</span>.closeBtn.className = <span class="string">'a-close'</span></span><br><span class="line">    <span class="keyword">this</span>.confirmButton.className = <span class="string">'a-confirm'</span></span><br><span class="line">    <span class="keyword">this</span>.confirmButton.innerHTML = data.confirm || <span class="string">'确认'</span></span><br><span class="line">    <span class="keyword">this</span>.contentNode.innerHTML = <span class="keyword">this</span>.content</span><br><span class="line">    <span class="keyword">this</span>.success = data.success || noop</span><br><span class="line">    <span class="keyword">this</span>.fail = data.fail || noop</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Alert.prototype = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 生成提示框</span></span><br><span class="line">      <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.closeBtn)</span><br><span class="line">      <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.contentNode)</span><br><span class="line">      <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.confirmButton)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(<span class="keyword">this</span>.panel)</span><br><span class="line">      <span class="keyword">this</span>.bindEvent()</span><br><span class="line">      <span class="keyword">this</span>.show()</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvent: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">this</span>.closeBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.fail()</span><br><span class="line">        _this.hide()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.confirmButton.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        _this.success()</span><br><span class="line">        _this.hide()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.panel.style.display = <span class="string">'node'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.panel.style.display = <span class="string">'block'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 右侧提示框实现</span></span><br><span class="line">  <span class="keyword">var</span> RightAlert = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    Alert.call(<span class="keyword">this</span>, data)</span><br><span class="line">    <span class="keyword">this</span>.confirmButton.className += <span class="string">' right'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  RightAlert.prototype = <span class="keyword">new</span> Alert()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标题提示框</span></span><br><span class="line">  <span class="keyword">var</span> TitleAlert = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    Alert.call(<span class="keyword">this</span>, data)</span><br><span class="line">    <span class="keyword">this</span>.title = data.title</span><br><span class="line">    <span class="keyword">this</span>.titleNode = <span class="built_in">document</span>.createElement(<span class="string">'h3'</span>)</span><br><span class="line">    <span class="keyword">this</span>.titleNode.innerHTML = <span class="keyword">this</span>.title</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  TitleAlert.prototype = <span class="keyword">new</span> Alert()</span><br><span class="line"></span><br><span class="line">  TitleAlert.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.panel.insertBefore(<span class="keyword">this</span>.titleNode, <span class="keyword">this</span>.panel.firstChild)</span><br><span class="line">    Alert.prototype.init.call(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以基类的封装继续封装</span></span><br><span class="line">  <span class="keyword">var</span> CancelAlert = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    TitleAlert.call(<span class="keyword">this</span>, data)</span><br><span class="line">    <span class="keyword">this</span>.cancel = data.cancel</span><br><span class="line">    <span class="keyword">this</span>.cancelBtn = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>)</span><br><span class="line">    <span class="keyword">this</span>.cancelBtn.className = <span class="string">'cancel'</span></span><br><span class="line">    <span class="keyword">this</span>.cancelBtn.innerHTML = <span class="keyword">this</span>.cancel || <span class="string">'取消'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里方法重写基础行为，所有继承最基础的类</span></span><br><span class="line">  CancelAlert.prototype = <span class="keyword">new</span> Alert()</span><br><span class="line"></span><br><span class="line">  CancelAlert.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    TitleAlert.prototype.init.call(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">this</span>.panel.appendChild(<span class="keyword">this</span>.cancelBtn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  CancelAlert.prototype.bindEvent = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">    TitleAlert.prototype.bindEvent.call(_this)</span><br><span class="line">    <span class="keyword">this</span>.cancelBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.fail()</span><br><span class="line">      _this.hide()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用</span></span><br><span class="line">  <span class="keyword">new</span> CancelAlert(&#123;</span><br><span class="line">    title: <span class="string">'dfasdfsdf'</span>,</span><br><span class="line">    content: <span class="string">'dsfsdfsdafs'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      log(<span class="string">'success'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      log(<span class="string">'fail'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).init()</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--享元模式</title>
      <link href="/2017/08/22/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><ol><li>运用共享技术有效的支持最大量的细粒度的对象，避免对象间拥有相同的内容造成多余的开销</li><li>主要对数据和方法共享分离，将数据和方法分为外部和内部，内部就是共享的，所以提出来这一部分能提高性能</li><li>barrat李靖的解释<ul><li>“享”是共享的意思，“元”指的是元件，也就是小颗粒的东西，<br>享元顾名思义便是共享小部件，很多系统或者程序包含大量对象，但是这些对象<br>绝大多数都是差不多的，除了一些极个别的属性外。<br>在享元模式中有两个比较重要的关键词，内部变量和外部变量；内部变量是可以<br>共享的属性集，而外部变量是对象之间的差异部分，通过相同+不同的方式组合诸<br>多对象，可以有效地节省系统空间，降低内存大小。</li></ul></li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="keyword">var</span> Flywight = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> created = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">create</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> dom = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).appendChild(dom)</span><br><span class="line">      created.push(dom)</span><br><span class="line">      <span class="keyword">return</span> dom</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      getDiv: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (created.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> create()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> div = created.shift()</span><br><span class="line">          created.push(div)</span><br><span class="line">          <span class="keyword">return</span> div</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> paper = <span class="number">0</span>,</span><br><span class="line">    article = [<span class="string">'fsdfsdafsadf'</span>, <span class="string">'fsdfsdfsdfdsa'</span>, <span class="string">'fdsfsdfsdfasdf'</span>, <span class="string">'fsdfsdfsdafsdafsdaf'</span>, <span class="string">'ffsdfsdfsdafsdafasdfasdf'</span>],</span><br><span class="line">    num = <span class="number">5</span>,</span><br><span class="line">    len = article.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (article[i]) &#123;</span><br><span class="line">      Flywight.getDiv().innerHTML = article[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'next_page'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (article.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n = ++paper * num % len,</span><br><span class="line">      j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (article[n + j]) &#123;</span><br><span class="line">        Flywight.getDiv().innerHTML = article[n + j]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (article[n + j - len]) &#123;</span><br><span class="line">        Flywight.getDiv().innerHTML = article[n + j - len]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Flywight.getDiv().innerHTML = <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 享元方法，其实也就是共享方法</span></span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="keyword">var</span> FlyWeight = &#123;</span><br><span class="line">    moveX: <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.x = x</span><br><span class="line">    &#125;,</span><br><span class="line">    moveY: <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.y = y</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Player = <span class="function"><span class="keyword">function</span> (<span class="params">x, y, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">    <span class="keyword">this</span>.color = c</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Player.prototype = FlyWeight</span><br><span class="line">  Player.prototype.changeC = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = c</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记-组合模式</title>
      <link href="/2017/08/21/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ol><li>层次结构，将部分整合成一个整体，类似DOM tree，所有有节点组合成一个html，使得用户对单个对象和组合的对象具有一致性<ul><li>有一个整体作为对外的接口，内部组合若干的层次，模块化每个组件</li></ul></li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  F.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span> (<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = inheritObject(superClass.prototype)</span><br><span class="line">  p.constructor = subClass</span><br><span class="line">  subClass.prototype = p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">News</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.children = []</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象</span></span><br><span class="line">News.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: 'News',</span><br><span class="line">  init: function () &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'please override your method'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'please override your method'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  getElement: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'please override your method'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Container</span> (<span class="params">id, parent</span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.id = id</span><br><span class="line">  <span class="keyword">this</span>.parent = parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Container, News)</span><br><span class="line"></span><br><span class="line">Container.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'ul'</span>)</span><br><span class="line">  <span class="keyword">this</span>.element.id = <span class="keyword">this</span>.id</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'new-container'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Container.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.children.push(child)</span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(child.getElement())</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Container.prototype.getElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Container.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.parent.appendChild(<span class="keyword">this</span>.element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一层级的集合类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Item</span> (<span class="params">className</span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.className = className</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Item, News)</span><br><span class="line"></span><br><span class="line">Item.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="keyword">this</span>.className</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Item.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.children.push(child)</span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(child.getElement())</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Item.prototype.getElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> NewsGroup = <span class="function"><span class="keyword">function</span> (<span class="params">className = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.className = className</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(NewsGroup, News)</span><br><span class="line"></span><br><span class="line">NewsGroup.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="keyword">this</span>.className</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NewsGroup.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.children.push(child)</span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(child.getElement())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NewsGroup.prototype.getElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ImageNews = <span class="function"><span class="keyword">function</span> (<span class="params">url = <span class="string">''</span>, href = <span class="string">'#'</span>, className = <span class="string">'normal'</span></span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.url = url</span><br><span class="line">  <span class="keyword">this</span>.href = href</span><br><span class="line">  <span class="keyword">this</span>.className = className</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(ImageNews, News)</span><br><span class="line"></span><br><span class="line">ImageNews.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  <span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">  img.src = <span class="keyword">this</span>.url</span><br><span class="line">  img.href = <span class="keyword">this</span>.href</span><br><span class="line">  <span class="keyword">this</span>.element.appendChild(img)</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'image-news '</span> + <span class="keyword">this</span>.className</span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ImageNews.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ImageNews.prototype.getElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> IconNews = <span class="function"><span class="keyword">function</span> (<span class="params">text = <span class="string">''</span>, href = <span class="string">'#'</span>, type = <span class="string">'video'</span></span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.text = text</span><br><span class="line">  <span class="keyword">this</span>.href = href</span><br><span class="line">  <span class="keyword">this</span>.type = type</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(IconNews, News)</span><br><span class="line"></span><br><span class="line">IconNews.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  <span class="keyword">this</span>.element.innerHTML = <span class="keyword">this</span>.text</span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'icon '</span> + <span class="keyword">this</span>.type</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IconNews.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IconNews.prototype.getElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> EasyNews = <span class="function"><span class="keyword">function</span> (<span class="params">text = <span class="string">''</span>, href = <span class="string">'#'</span></span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.text = text</span><br><span class="line">  <span class="keyword">this</span>.href = href</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(EasyNews, News)</span><br><span class="line"></span><br><span class="line">EasyNews.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  <span class="keyword">this</span>.element.innerHTML = <span class="keyword">this</span>.text</span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'text'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EasyNews.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EasyNews.prototype.getElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TypeNews</span> (<span class="params">text = <span class="string">''</span>, href = <span class="string">'#'</span>, type = <span class="string">''</span>, pos = <span class="string">'left'</span></span>) </span>&#123;</span><br><span class="line">  News.call(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.text = text</span><br><span class="line">  <span class="keyword">this</span>.href = href</span><br><span class="line">  <span class="keyword">this</span>.type = type</span><br><span class="line">  <span class="keyword">this</span>.pos = pos</span><br><span class="line">  <span class="keyword">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(TypeNews, News)</span><br><span class="line"></span><br><span class="line">TypeNews.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.pos === <span class="string">'left'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element.innerHTML = <span class="string">'['</span> + <span class="keyword">this</span>.type + <span class="string">'] '</span> + <span class="keyword">this</span>.text</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.element.innerHTML = <span class="keyword">this</span>.text + <span class="string">' ['</span> + <span class="keyword">this</span>.type + <span class="string">']'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.element.href = <span class="keyword">this</span>.href</span><br><span class="line">  <span class="keyword">this</span>.element.className = <span class="string">'text'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TypeNews.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TypeNews.prototype.getElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 层级已经声明，开始组合</span></span><br><span class="line"><span class="keyword">var</span> news1 = <span class="keyword">new</span> Container(<span class="string">'news'</span>, <span class="built_in">document</span>.body)</span><br><span class="line">news1</span><br><span class="line">  .add(</span><br><span class="line">    <span class="keyword">new</span> Item(<span class="string">'normal'</span>)</span><br><span class="line">      .add(</span><br><span class="line">        <span class="keyword">new</span> IconNews(<span class="string">'fkdsjflksdjflkjsdlkfjlskdjf'</span>, <span class="string">'#'</span>, <span class="string">'video'</span>)</span><br><span class="line">      )</span><br><span class="line">  )</span><br><span class="line">  .add(</span><br><span class="line">    <span class="keyword">new</span> Item(<span class="string">'normal'</span>)</span><br><span class="line">      .add(</span><br><span class="line">        <span class="keyword">new</span> IconNews(<span class="string">'[fdsfdsfdsfsdfsdfdasf'</span>, <span class="string">'#'</span>, <span class="string">'live'</span>)</span><br><span class="line">      )</span><br><span class="line">  )</span><br><span class="line">  .add(</span><br><span class="line">    <span class="keyword">new</span> NewsGroup(<span class="string">'has-img'</span>)</span><br><span class="line">      .add(</span><br><span class="line">        <span class="keyword">new</span> ImageNews(<span class="string">'img/1.jpg'</span>, <span class="string">'#'</span>, <span class="string">'small'</span>)</span><br><span class="line">      )</span><br><span class="line">      .add(</span><br><span class="line">        <span class="keyword">new</span> EasyNews(<span class="string">'dsfdsfsdfdsfsdfd'</span>, <span class="string">'#'</span>)</span><br><span class="line">      )</span><br><span class="line">      .add(</span><br><span class="line">        <span class="keyword">new</span> EasyNews(<span class="string">'xxxxxxxxxxxxxx'</span>, <span class="string">'#'</span>)</span><br><span class="line">      )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记-桥接模式</title>
      <link href="/2017/08/21/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><ol><li>某些类型由于自身的逻辑，会向多个维度变化，使其不增加复杂度并达到解耦的目的<ul><li>将一个函数或者类当做一个桥梁，提取公共部分，将实现和抽象通过桥接的方法链接在一起</li><li>针对多维度变化，可以创建许多个桥梁</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">let</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Speed</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x  = x</span><br><span class="line">  <span class="keyword">this</span>.y = y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Speed.prototype.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'run'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span> (<span class="params">cl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cl = cl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Color.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'draw'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span> (<span class="params">sp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.shape = sp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Shape.prototype.change = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'改变形状'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Speek</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.word = word</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Speek.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'fuck'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一座桥梁，在生成 Ball的时候直接 new Ball</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ball</span> (<span class="params">x, y, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y)</span><br><span class="line">  <span class="keyword">this</span>.color = <span class="keyword">new</span> Color(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ball.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed.run()</span><br><span class="line">  <span class="keyword">this</span>.color.draw()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params">x, y, f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed = <span class="keyword">new</span> Speed(x, y)</span><br><span class="line">  <span class="keyword">this</span>.speek = <span class="keyword">new</span> Speek(f)</span><br><span class="line">&#125;</span><br><span class="line">People.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.speed.run()</span><br><span class="line">  <span class="keyword">this</span>.speek.say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过桥梁生成实体</span></span><br><span class="line"><span class="keyword">var</span> ball = <span class="keyword">new</span> Ball(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'#ccc'</span>)</span><br><span class="line">ball.init()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--装饰者模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<p>##装饰者模式</p><ul><li>不改变原对象的基础上，通过添加属性或方法使原对象满足要求<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">// 装饰者</span></span><br><span class="line"><span class="keyword">var</span> decorator = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">input, fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取事件源</span></span><br><span class="line">    <span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(input)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> input.onclick === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="comment">// 将之前的存起来，那之前有很多怎么办</span></span><br><span class="line">      <span class="keyword">var</span> old = input.onclick</span><br><span class="line">      input.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        old()</span><br><span class="line">        <span class="comment">// 看见吗就是执行了之前的函数，顺便加了个回调</span></span><br><span class="line">        fn()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      input.onclick = fn</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fuck'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">decorator(<span class="string">'btn'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'just go on'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--代理模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ol><li>对于一个对象不能直接引用另一个对象，所以通过代理起个中介作用</li><li>没想到这一章讲的是跨域，我的妈呀，这怎么成了设计模式了</li><li>跨域解决方案：<ul><li>jsonp 创建script标签获取数据，不能post</li><li>iframe 通过iframe拿数据，写起来麻烦，还很弱</li><li>nginx或者其他服务器进行跨域，或者设置http cors</li><li>… 其他</li></ul></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--适配器模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><ul><li>什么是适配器，就是将数据转化了一下，防止出错或者数据改变</li></ul><ol><li>假设引入了JQ，而JQ和自己的代码库重叠了，怎么办？<ul><li>window.my$ = jQuery 就是这么粗暴</li></ul></li><li>比如你要的数据是<code>[{},{}]</code>这样的，后台给了你<code>{}</code>，你怎么办<ul><li>写个适配器，转化一下。 噗！吐血</li></ul></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--外观模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><ul><li>这章坑爹，就是说了下兼容性的封装，在写个小小型代码库</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> A = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    g: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// todo: 其余不想写了，就是获取元素，添加事件的封装</span></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--单例模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>只能实例化一次，第二次实例化将之前实例化好的对象返回，就可以共享实例的内存，可用于modal弹框</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> single = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fuck</span> (<span class="params">bitch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bitch = bitch</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Fuck.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.bitch</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getInstance: <span class="function"><span class="keyword">function</span> (<span class="params">bitch</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Fuck(bitch)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享一个实例</span></span><br><span class="line"><span class="keyword">var</span> s = single.getInstance(<span class="string">'fucker'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br><span class="line"><span class="keyword">var</span> y = single.getInstance(<span class="string">'dsfsd'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(y)</span><br><span class="line"><span class="built_in">console</span>.log(y.start())</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--原型模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<ul><li>受不了了，什么都是设计模式，一个JS的原型链继承都能当做设计模式，也是醉了</li><li>整篇我看最有用的就是那个继承函数</li><li>说白了这个模式就像将原型的属性和方法进行共享</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--建造者模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><ul><li>创建出来的对象直接具有已实现的某些属性方法</li><li>此模式参与对象的创建过程，干涉了对象的创建细节</li><li>场景：已有内部给定的方法和属性，只需要选择需要的属性，就可以产生一个完整的对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Human = <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.skill = param &amp;&amp; param.skill || <span class="string">'保密'</span></span><br><span class="line">    <span class="keyword">this</span>.hobby = param &amp;&amp; param.hobby || <span class="string">'保密'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Human.prototype = &#123;</span><br><span class="line">    getSkill: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.skill</span><br><span class="line">    &#125;,</span><br><span class="line">    getHobby: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.hobby</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Named = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 构造</span></span><br><span class="line">    ~<span class="function"><span class="keyword">function</span> (<span class="params">name, _this</span>) </span>&#123;</span><br><span class="line">      _this.wholeName = name</span><br><span class="line">      <span class="keyword">if</span> (name.indexOf(<span class="string">' '</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        _this.firstName = name.slice(<span class="number">0</span>, name.indexOf(<span class="string">' '</span>))</span><br><span class="line">        _this.secondName = name.slice(name.indexOf(<span class="string">' '</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(name, _this)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Work = <span class="function"><span class="keyword">function</span> (<span class="params">work</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">    ~<span class="function"><span class="keyword">function</span> (<span class="params">work, _this</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (work) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'code'</span>:</span><br><span class="line">          _this.work = <span class="string">'工程师'</span></span><br><span class="line">          _this.workDescript = <span class="string">'每天沉醉于编程'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'UI'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'UE'</span>:</span><br><span class="line">          _this.work = <span class="string">'设计师'</span></span><br><span class="line">          _this.workDescript = <span class="string">'设计更似一种艺术'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'teach'</span>:</span><br><span class="line">          _this.work = <span class="string">'教师'</span></span><br><span class="line">          _this.workDescript = <span class="string">'分享也是一种快乐'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          _this.work = work</span><br><span class="line">          _this.workDescript = <span class="string">'不清楚你的职业'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(work, _this)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Work.prototype.changeWork = <span class="function"><span class="keyword">function</span> (<span class="params">work</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.work = work</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Work.prototype.changeDescript = <span class="function"><span class="keyword">function</span> (<span class="params">descript</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.workDescript = descript</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params">name, work</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _person = <span class="keyword">new</span> Human()</span><br><span class="line">    _person.name = <span class="keyword">new</span> Named(name)</span><br><span class="line">    _person.work = <span class="keyword">new</span> Work(work)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _person</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'s b'</span>, <span class="string">'UI'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(person.skill)</span><br><span class="line">  <span class="built_in">console</span>.log(person.name.firstName)</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--抽象工厂模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ol><li>抽象类：声明但是不能使用的类</li><li>创造一个通用的大类，通过这个类去创建一系列抽象类，让子类去继承父类定义的但不能使用的方法,子类然后去实现这个抽象的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  Car.prototype = &#123;</span><br><span class="line">    getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抽象工厂方法</span></span><br><span class="line">  <span class="keyword">var</span> VehicleFactory = <span class="function"><span class="keyword">function</span> (<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> VehicleFactory[superType] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="comment">// noinspection JSAnnotator</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      F.prototype = <span class="keyword">new</span> VehicleFactory[superType]()</span><br><span class="line">      subType.constructor = subType</span><br><span class="line">      <span class="comment">// 子类原型继承父类</span></span><br><span class="line">      subType.prototype = <span class="keyword">new</span> F()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'未创建该抽象对象'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VehicleFactory.Car = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'car'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VehicleFactory.Car.prototype = &#123;</span><br><span class="line">    getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VehicleFactory.Bus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'bus'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VehicleFactory.Bus.prototype = &#123;</span><br><span class="line">    getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VehicleFactory.Truck = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = <span class="string">'truck'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VehicleFactory.Truck.prototype = &#123;</span><br><span class="line">    getPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getSpeed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> BMW = <span class="function"><span class="keyword">function</span> (<span class="params">price, speed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.price = price</span><br><span class="line">    <span class="keyword">this</span>.speed = speed</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  VehicleFactory(BMW, <span class="string">'car'</span>)</span><br><span class="line"></span><br><span class="line">  BMW.prototype.getPrice = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.price</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  BMW.prototype.getSpeed = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.speed</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="keyword">this</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--工厂模式</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ol><li>工厂模式顾名思义就是一个工厂，里面可以创建各种类型的产品</li><li><p>工厂模式和类</p><ul><li>工厂模式可以根据所需产生不同的类</li><li>类是一个厂内一个小型的团体</li></ul></li><li><p>抽象工程模式</p><ul><li>父类不提供实体方法，只提供接口，通过子类去实现覆盖</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)</span><br><span class="line"></span><br><span class="line">log(<span class="string">'--------简单工厂，就是一个简单的封装--------'</span>)</span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Button</span> (<span class="params">type, placeholder</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    o.content = placeholder</span><br><span class="line">    o.click = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      log(placeholder)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'error'</span>) &#123;</span><br><span class="line">      o.color = <span class="string">'red'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      o.color = <span class="string">'blue'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> o</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> errorBtn = Button(<span class="string">'error'</span>, <span class="string">'heheheheh'</span>)</span><br><span class="line">  <span class="keyword">var</span> primaryBtn = Button(<span class="string">'df'</span>, <span class="string">'dfsdfsdfsdfd'</span>)</span><br><span class="line">  log(errorBtn.content)</span><br><span class="line">  log(primaryBtn.content)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log(<span class="string">'-------工厂方法模式---------'</span>)</span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Button</span> (<span class="params">type, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Button) &#123;</span><br><span class="line">      <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="keyword">this</span>[type](content)</span><br><span class="line">      <span class="keyword">return</span> o</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Button(type, content)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Button.click = <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    log(content)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Button.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: 'Button',</span><br><span class="line">    error: function (content) &#123;</span><br><span class="line">      <span class="keyword">this</span>.color = <span class="string">'red'</span></span><br><span class="line">      Button.click(content)</span><br><span class="line">    &#125;,</span><br><span class="line">    primary: <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.color = <span class="string">'blue'</span></span><br><span class="line">      Button.click(content)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = Button(<span class="string">'error'</span>, <span class="string">'content'</span>)</span><br><span class="line">  log(a.color)</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--面向对象</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <content type="html"><![CDATA[<p>##面向对象</p><ol><li>面向对象就是将需要的功能封装为一个对象，这个对象称之为类，台湾翻译为面向物体编程，个人认为比较确切</li><li>面向对象的特征<ul><li>封装（就是将私有变量方法封装，高内聚低耦合）</li><li>继承（子类继承父类），即一个类继承另一个类的属性和方法</li><li>多态（根据函数的参数等不一样的状态，构成不一样的方法）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">let</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>)</span><br><span class="line"></span><br><span class="line">log(<span class="string">'----------------------封装，主要是封装私有变量-----------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Book = <span class="function"><span class="keyword">function</span> (<span class="params">id, name, price</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 私有变量</span></span><br><span class="line"><span class="comment">   * @type &#123;number&#125;</span></span><br><span class="line"><span class="comment">   * @private</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> _num = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">this</span>.id = id</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.price = price</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 私有方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkId</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    log(_this.id, _num, _this.price)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  checkId()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 公共方法</span></span><br><span class="line">  <span class="keyword">this</span>.id = id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类静态共有属性</span></span><br><span class="line">Book.face = <span class="string">'paper'</span></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line">Book.fuck = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'fuck'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过闭包实现封装</span></span><br><span class="line"><span class="keyword">let</span> Book2 = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 通过闭包，将属性包起来</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 静态变量</span></span><br><span class="line"><span class="comment">   * @type &#123;number&#125;</span></span><br><span class="line"><span class="comment">   * @private</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> _num = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">id, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.fuck = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      log(<span class="keyword">this</span>.name, _num)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Book2(<span class="number">1</span>, <span class="string">'test'</span>)</span><br><span class="line">b.fuck()</span><br><span class="line"></span><br><span class="line">log(<span class="string">'-----------------------继承--------------------------'</span>)</span><br><span class="line">log(<span class="string">'-------类式继承, 引用类型容易和父级绑定到一起，导致问题--------'</span>)</span><br><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> SuperClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.superValue = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.books = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.superValue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">SubClass</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subValue = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SubClass.prototype = <span class="keyword">new</span> SuperClass()</span><br><span class="line"></span><br><span class="line">  SubClass.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subValue</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SubClass.prototype.setBook = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.books.push(<span class="string">'setBook'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> s = <span class="keyword">new</span> SubClass()</span><br><span class="line">  <span class="keyword">let</span> o = <span class="keyword">new</span> SubClass()</span><br><span class="line">  log(<span class="string">'subValue = '</span> + o.getSubValue(), <span class="string">'superValue = '</span> + o.getSuperValue())</span><br><span class="line">  o.setBook()</span><br><span class="line">  s.books.push(<span class="string">'jejejej'</span>)</span><br><span class="line">  log(o.books, s.books)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log(<span class="string">'------构造继承-----'</span>)</span><br><span class="line"></span><br><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.books = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SuperClass.prototype.showBooks = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    log(<span class="keyword">this</span>.books)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">SubClass</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 关键</span></span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>, id)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SubClass.prototype = <span class="keyword">new</span> SuperClass()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> o1 = <span class="keyword">new</span> SubClass(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> o2 = <span class="keyword">new</span> SubClass(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  o1.books.push(<span class="string">'34'</span>)</span><br><span class="line">  o2.books.push(<span class="string">'43'</span>)</span><br><span class="line"></span><br><span class="line">  o1.showBooks()</span><br><span class="line">  o2.showBooks()</span><br><span class="line"></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log(<span class="string">'------原型继承-----'</span>)</span><br><span class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    F.prototype = o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span> (<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p = inheritObject(superClass.prototype)</span><br><span class="line">    p.constructor = subClass</span><br><span class="line">    subClass.prototype = p</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SuperClass.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">SubClass</span> (<span class="params">name, time</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 会开辟内存，构造函数式继承</span></span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>, name)</span><br><span class="line">    <span class="keyword">this</span>.time = time</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inheritPrototype(SubClass, SuperClass)</span><br><span class="line"></span><br><span class="line">  SubClass.prototype.getTime = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.time</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> o1 = <span class="keyword">new</span> SubClass(<span class="string">'23'</span>, <span class="number">3434</span>)</span><br><span class="line">  <span class="keyword">let</span> o2 = <span class="keyword">new</span> SubClass(<span class="string">'234'</span>, <span class="number">34</span>)</span><br><span class="line"></span><br><span class="line">  o1.colors.push(<span class="string">'dsfdsf'</span>)</span><br><span class="line">  log(o1.colors, o2.colors)</span><br><span class="line"></span><br><span class="line">  o1.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'324234324'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  o1.getName()</span><br><span class="line">  log(o2.getName())</span><br><span class="line"></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式笔记--简介</title>
      <link href="/2017/08/18/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0-%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<p>##创建函数比较多的时候应该加上命名空间</p><ol><li>可以写在一个对象里面，也可以用构造函数的方式</li><li>链式调用就是返回一个拥有某个方法的对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="comment">// 1. 真假对象链式调用</span></span><br><span class="line"><span class="keyword">var</span> CheckObject = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    checkName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'name'</span>)</span><br><span class="line">      <span class="keyword">return</span> o</span><br><span class="line">    &#125;,</span><br><span class="line">    checkEmail: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'email'</span>)</span><br><span class="line">      <span class="keyword">return</span> o</span><br><span class="line">    &#125;,</span><br><span class="line">    checkPassword: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'password'</span>)</span><br><span class="line">      <span class="keyword">return</span> o</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkObject = CheckObject()</span><br><span class="line">checkObject.checkName().checkEmail().checkPassword()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'-----------------------addMethod-------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// addMethod添加多个函数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.addMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methods</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(methods).forEach(<span class="function">(<span class="params">key, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = methods[key]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> methods = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">methods</span><br><span class="line">  .addMethod(&#123;</span><br><span class="line">    <span class="string">'checkName'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'name'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'checkPassword'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'password'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .addMethod(&#123;</span><br><span class="line">    <span class="string">'checkEmail'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'email'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">methods.checkName().checkPassword().checkEmail()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>说说HTTP缓存</title>
      <link href="/2017/08/18/%E8%AF%B4%E8%AF%B4HTTP%E7%BC%93%E5%AD%98/"/>
      <content type="html"><![CDATA[<h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><h3 id="什么是浏览器缓存"><a href="#什么是浏览器缓存" class="headerlink" title="什么是浏览器缓存"></a>什么是浏览器缓存</h3><p>用户访问页面的时候，对于某些资源，会将其保存在客户端。在下一次访问的时候，会将缓存从客户端拿出来，减少HTTP请求，提高用户体验。</p><h3 id="浏览器缓存是什么样子的？"><a href="#浏览器缓存是什么样子的？" class="headerlink" title="浏览器缓存是什么样子的？"></a>浏览器缓存是什么样子的？</h3><p>访问github.com，看下资源文件的报文<br><a id="more"></a></p><p><img src="/2017/08/18/说说HTTP缓存/github.png" alt="github图片"><br>可以看到报文里面有cache-control，Expires,Last-Modified这样的字段，这种文件就是从浏览器缓存中拿出来的，可以看出速度特别快<br><img src="/2017/08/18/说说HTTP缓存/githubRequest.png" alt="github请求图片"></p><h3 id="是什么控制着浏览器对文件的缓存与否？"><a href="#是什么控制着浏览器对文件的缓存与否？" class="headerlink" title="是什么控制着浏览器对文件的缓存与否？"></a>是什么控制着浏览器对文件的缓存与否？</h3><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control:"></a>Cache-Control:</h4><ol><li><strong>max-age</strong> 设置缓存时间，单位为秒，这个时间是指缓存的时长，即在这个时间内的这个资源都会使用这个版本，服务器文件变化了浏览器也不会改变。</li><li><strong>public</strong> 如果没有指定，则缺省值是public，指定是浏览器或者任何web的代理中间trunk都可以进行文件的缓存，比如CDN也能缓存</li><li><strong>private</strong> 只有用户浏览器可以缓存，这样CDN中继就缓存不到了</li><li><strong>no-cache</strong> 表明必须要和服务器进行确认资源是否更改，如果更改了，就会返回最新的，在浏览器NetWork界面激活Disable cache，或者使用ctrl+f5强制刷新，浏览器都会给请求加上<strong>Cache-Control:no-cache;Pragma:no-cache</strong></li><li><strong>no-store</strong> 绝对性的禁止掉缓存，比no-cache强势一百倍，直接从服务器拉取资源</li><li>其他的都不太常用，就不赘述了</li></ol><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p><strong>Expires</strong>是有效期的意思，顾名思义就是设置资源的有效时间，（<code>Expires:Sat, 26 Aug 2017 10:24:11 GMT</code>即只保存到2017-08-26 10:24:11,过时过期），和<strong>max-age</strong>有点类似，但是没有<strong>Cache-Control</strong>的优先级高，同时出现<strong>Cache-Control:max-age</strong>会覆盖掉<strong>Expires</strong>。Expires需要和last-modified结合使用</p><h4 id="Last-modified"><a href="#Last-modified" class="headerlink" title="Last-modified"></a>Last-modified</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;服务器资源的最后修改时间，需要cache-control共用。浏览器第一请求时，会返回<code>Last-Modified:Wed, 21 Jun 2017 10:03:54 GMT</code>，指服务端最后一次修改文件的时间。浏览器读取后存到这个信息，在下次请求时会给请求头加上<code>If-Modified-Since:Wed, 21 Jun 2017 10:03:54 GMT</code>，用这个值去和服务端对比，没有修改就返回304，如果修改过就返回最新资源。</p><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;由服务端根据内容生成的一段hash，浏览器会拿这段hash和服务端进行验证资源是否修改（<code>ETag:&quot;7c9570c4fd0d21:0&quot;</code>）。请求时，浏览器会加上这段ETag，不过请求的字段叫做<code>If-None-Match:W/&quot;7c9570c4fd0d21:0&quot;</code>这就是ETag<br>使用ETag可以解决Last-modified存在的一些问题：</p><ol><li>某些服务器不能精确得到资源的最后修改时间，这样就无法通过最后修改时间判断资源是否更新 </li><li>如果资源修改非常频繁，在秒以下的时间内进行修改，而Last-modified只能精确到秒 </li><li>一些资源的最后修改时间改变了，但是内容没改变，使用ETag就认为资源还是没有修改的。</li></ol><h3 id="同样是200-from-disk-cache-和-from-memory-cache-区别"><a href="#同样是200-from-disk-cache-和-from-memory-cache-区别" class="headerlink" title="同样是200 from disk cache 和 from memory cache 区别"></a>同样是200 from disk cache 和 from memory cache 区别</h3><p><img src="/2017/08/18/说说HTTP缓存/disk.png" alt="disk"><br>可以看到<strong>from memory cache</strong>是不需要时间的0ms，而memory需要时间。<br>哈哈很简单，就是一个存在disk（磁盘中），一个存在memory(内存)中，存在磁盘需要读取时间。<br>存在磁盘中，退出浏览器资源还会存在，存在memory中关闭浏览器进程就会清除缓存。参考链接<a href="http://blog.csdn.net/m632587166/article/details/50732205?locationNum=14" target="_blank" rel="noopener">memoryCache和diskCache流程详解</a></p><h3 id="都特么几乎是后台控制的缓存，那前端呢？"><a href="#都特么几乎是后台控制的缓存，那前端呢？" class="headerlink" title="都特么几乎是后台控制的缓存，那前端呢？"></a>都特么几乎是后台控制的缓存，那前端呢？</h3><ol><li>html页面配置no-cache,html <code>&lt;meta&gt;</code>标签中有个叫做http-equiv的属性，就是设置http头信息，关键字等等<ol><li><code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code>设置no-cache</li><li><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</code> 设置Expires为0</li><li>…</li></ol></li><li>对于js或者css文我们一般会选择进行缓存，如果要更新的话，只需要将引入的js文件写上版本号<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"xxx?v=0.2"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>最好的方式是给文件加上hash或md5值，对于改变了的文件更改hash，这样就能更新网站了。webpack,gulp等工具都能实现。thx</p><h2 id="博客中比较流行的缓存流程图"><a href="#博客中比较流行的缓存流程图" class="headerlink" title="博客中比较流行的缓存流程图"></a>博客中比较流行的缓存流程图</h2><p><img src="/2017/08/18/说说HTTP缓存/liucheng.png" alt="liucheng.png">  </p><p><strong>cache-control</strong><br><img src="/2017/08/18/说说HTTP缓存/cache-control.png" alt="cache-control.png"></p>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>读书整理</title>
      <link href="/2017/08/17/%E8%AF%BB%E4%B9%A6%E6%95%B4%E7%90%86/"/>
      <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>总觉得自己看书看的很乱，总结下看过的书和想看的书，避免看重复，最好做下笔记。看完一本及时更新下，读书笔记都会写在<a href="https://github.com/slipkinem/jsTest" target="_blank" rel="noopener">这里</a>。<br>看书总有一种看过了就忘记了，看过了还是不会的感觉，所有看书一定要做好笔记，哪怕记不住，没看懂。将不懂得名词通过搜索引擎查找，哪怕一个词背后有庞大的知识群体，也要硬着头皮看，会有意想不到的收货。读书有一个明显的好处就是可以提高理解能力，读书的时候用心去思考，结合书中的例子将代码一点点敲下来，这是我以后读书要做的事情，之前没做好读书笔记真是太后悔了。keep it real.</p><h2 id="正在看的书籍"><a href="#正在看的书籍" class="headerlink" title="正在看的书籍"></a>正在看的书籍</h2><ol><li>javascript权威指南</li><li>《《HTML5 Canvas游戏开发实战》》</li><li>webkit技术内幕</li></ol><h2 id="看过得书籍"><a href="#看过得书籍" class="headerlink" title="看过得书籍"></a>看过得书籍</h2><ol><li>angular权威指南</li><li>angular2 training</li><li>深入浅出node.js</li><li>node.js in action</li><li>架构探险 从零开始写javaweb框架</li><li>javascript编码规范</li><li>你不知道的JavaScript第一卷</li><li>一个月悟透javaScript</li><li>图解HTTP协议</li><li>jsp&amp;servlet学习笔记</li></ol><h2 id="想要看的书籍"><a href="#想要看的书籍" class="headerlink" title="想要看的书籍"></a>想要看的书籍</h2><ol><li>WEBGL权威指南</li><li>C++primary</li></ol>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 课外学习 </tag>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jsDemo</title>
      <link href="/2017/07/08/jsDemo/"/>
      <content type="html"><![CDATA[<p>##Demo <a href="http://demos.faceplus.top" target="_blank" rel="noopener">Demo就在这里</a></p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单的代码，读懂观察者模式和Promise</title>
      <link href="/2017/06/10/%E7%AE%80%E5%8D%95%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BA%86%E8%A7%A3%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8CPromise/"/>
      <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。"><a href="#观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。" class="headerlink" title="观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。"></a>观察者模式又叫做发布订阅模式，其基础支撑是事件的发布与订阅。</h3><p>– 基于观察者模式，可以做数据的绑定，代码的解耦。<br><a id="more"></a></p><h5 id="一个简单的观察者模式代码示例："><a href="#一个简单的观察者模式代码示例：" class="headerlink" title="一个简单的观察者模式代码示例："></a>一个简单的观察者模式代码示例：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 容器，存放subscribe订阅的内容</span></span><br><span class="line">    <span class="keyword">this</span>.subscribes = &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: 'Observer',</span><br><span class="line">    // 往容器放东西</span><br><span class="line">    subscribe: function (eventName, callback) &#123;</span><br><span class="line">        <span class="keyword">this</span>.subscribes[eventName] = callback</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取函数，执行</span></span><br><span class="line">    publish: <span class="function"><span class="keyword">function</span> (<span class="params">eventName, stuff</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 把订阅的东西取出来</span></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        <span class="keyword">this</span>.subscribes[eventName](stuff)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用此代码"><a href="#使用此代码" class="headerlink" title="使用此代码"></a>使用此代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> Observer()</span><br><span class="line"></span><br><span class="line">observer.subscribe(<span class="string">'吃饭'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stuff</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stuff) <span class="comment">// 成功打印面条</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    observer.publish(<span class="string">'吃饭'</span>, <span class="string">'面条'</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h5 id="代码的逻辑很简单"><a href="#代码的逻辑很简单" class="headerlink" title="代码的逻辑很简单"></a>代码的逻辑很简单</h5><ol><li><strong>subscribe</strong>的时候将要执行的函数放入存放函数的容器</li><li><strong>publish</strong>的时候根据事件的名称取出函数，并传入数据，执行</li></ol><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise是js异步的解决方案，通常用于ajax请求"><a href="#Promise是js异步的解决方案，通常用于ajax请求" class="headerlink" title="Promise是js异步的解决方案，通常用于ajax请求"></a>Promise是js异步的解决方案，通常用于ajax请求</h3><h4 id="继续编写简单的代码"><a href="#继续编写简单的代码" class="headerlink" title="继续编写简单的代码"></a>继续编写简单的代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 容器，存放then订阅的东西</span></span><br><span class="line">    <span class="keyword">this</span>._deferreds = []</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 承诺被执行</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">stuff</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 取出存的东西</span></span><br><span class="line">        _this._deferreds.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">deferred</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            deferred(stuff)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Promise传入的函数，执行时将resolve传进去</span></span><br><span class="line">    executor(resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 往里面放东西</span></span><br><span class="line">    <span class="keyword">this</span>._deferreds.push(onFulfilled)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用此代码-1"><a href="#使用此代码-1" class="headerlink" title="使用此代码"></a>使用此代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        resolve(<span class="string">'apple'</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">stuff</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(stuff) <span class="comment">// apple</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h5 id="Promise的关键点在于"><a href="#Promise的关键点在于" class="headerlink" title="Promise的关键点在于"></a>Promise的关键点在于</h5><ol><li><strong>.then</strong>是给存放回调的容器里面添加回调函数</li><li><strong>resolve</strong>是<strong>then</strong>注册回调的执行者，所以当异步的时候，then要后于resolve执行。同样PubSub也可以用于异步</li><li>Promise也是观察者模式的一种实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用事件发布订阅处理异步</span></span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> Observer()</span><br><span class="line"></span><br><span class="line">observer.subscribe(<span class="string">'吃饭'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stuff</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stuff) <span class="comment">// 面条</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">   url: <span class="string">'饭堂'</span></span><br><span class="line">&#125;)</span><br><span class="line">.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  observer.publish(<span class="string">'吃饭'</span>, data[<span class="string">'面条'</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h5 id="都可以轻松的实现异步的解耦"><a href="#都可以轻松的实现异步的解耦" class="headerlink" title="都可以轻松的实现异步的解耦"></a>都可以轻松的实现异步的解耦</h5><h3 id="以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise"><a href="#以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise" class="headerlink" title="以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise"></a>以上都是最简单的实现，二八定律中的二吧，有兴趣可以用es6写一个简单版的Promise</h3><p><a href="http://faceplus.top/2017/04/18/es6%E7%89%88promise/">es6Promise</a></p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>angular2-约定优于配置</title>
      <link href="/2017/05/15/angular2-%E7%BA%A6%E5%AE%9A%E4%BC%98%E4%BA%8E%E9%85%8D%E7%BD%AE/"/>
      <content type="html"><![CDATA[<h2 id="angular2可以明显感觉到一个法则：约定优于配置"><a href="#angular2可以明显感觉到一个法则：约定优于配置" class="headerlink" title="angular2可以明显感觉到一个法则：约定优于配置"></a>angular2可以明显感觉到一个法则：约定优于配置</h2><a id="more"></a>]]></content>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java SSM和vue整合</title>
      <link href="/2017/04/25/java-ssm/"/>
      <content type="html"><![CDATA[<h1 id="SSM整合流程"><a href="#SSM整合流程" class="headerlink" title="SSM整合流程"></a>SSM整合流程</h1><h2 id="spring-spring-mvc-mybatis-maven"><a href="#spring-spring-mvc-mybatis-maven" class="headerlink" title="spring spring-mvc mybatis maven"></a>spring spring-mvc mybatis maven</h2><ul><li>web前端项目的源码<a href="https://github.com/slipkinem/vue-admin" target="_blank" rel="noopener">vue-admin</a></li><li>数据库的sql文件<a href="vue_admin.sql">vue_admin.sql</a></li></ul><h3 id="IDE-idea"><a href="#IDE-idea" class="headerlink" title="IDE idea"></a>IDE idea</h3><ol><li>File =&gt; new Project =&gt; maven =&gt; create from archetype =&gt; <strong>maven-archetype-webapp</strong><br><img src="/2017/04/25/java-ssm/1.png" alt="1"></li><li><p>一直点击next直到finished，maven会自动创建一个项目目录<br><img src="/2017/04/25/java-ssm/2.png" alt="2"></p><ul><li>最终项目目录结构图  <a id="more"></a><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│  tree.txt</span><br><span class="line">│  </span><br><span class="line">├─src</span><br><span class="line">│  └─main</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─cn</span><br><span class="line">│      │      └─lvsen</span><br><span class="line">│      │          └─test</span><br><span class="line">│      │              ├─controller</span><br><span class="line">│      │              │      TableController.java</span><br><span class="line">│      │              │      UserController.java</span><br><span class="line">│      │              │      </span><br><span class="line">│      │              ├─dao</span><br><span class="line">│      │              │      TableDataMapper.java</span><br><span class="line">│      │              │      UserMapper.java</span><br><span class="line">│      │              │      </span><br><span class="line">│      │              ├─interceptor</span><br><span class="line">│      │              │      AuthInterceptor.java</span><br><span class="line">│      │              │      </span><br><span class="line">│      │              ├─mapping</span><br><span class="line">│      │              │      TableDataMapper.xml</span><br><span class="line">│      │              │      UserMapper.xml</span><br><span class="line">│      │              │      </span><br><span class="line">│      │              ├─model</span><br><span class="line">│      │              │      TableData.java</span><br><span class="line">│      │              │      TableDataExample.java</span><br><span class="line">│      │              │      User.java</span><br><span class="line">│      │              │      UserExample.java</span><br><span class="line">│      │              │      </span><br><span class="line">│      │              └─service</span><br><span class="line">│      │                  │  TableService.java</span><br><span class="line">│      │                  │  UserService.java</span><br><span class="line">│      │                  │  </span><br><span class="line">│      │                  └─impl</span><br><span class="line">│      │                          TableServiceImpl.java</span><br><span class="line">│      │                          UserServiceImpl.java</span><br><span class="line">│      │                          </span><br><span class="line">│      ├─resources</span><br><span class="line">│      │  │  generatorConfig.xml</span><br><span class="line">│      │  │  jdbc.properties</span><br><span class="line">│      │  │  logback<span class="selector-class">.xml</span><span class="selector-class">.bak</span></span><br><span class="line">│      │  │  </span><br><span class="line">│      │  └─spring</span><br><span class="line">│      │          spring-mvc.xml</span><br><span class="line">│      │          spring-mybatis.xml</span><br><span class="line">│      │          </span><br><span class="line">│      └─webapp</span><br><span class="line">│          │  index.html</span><br><span class="line">│          │  index.jsp</span><br><span class="line">│          │  </span><br><span class="line">│          ├─static</span><br><span class="line">│          │  ├─css</span><br><span class="line">│          │  │      app<span class="selector-class">.f3c8e005c2be0a746136766675898059</span><span class="selector-class">.css</span></span><br><span class="line">│          │  │      app<span class="selector-class">.f3c8e005c2be0a746136766675898059</span><span class="selector-class">.css</span><span class="selector-class">.gz</span></span><br><span class="line">│          │  │      </span><br><span class="line">│          │  ├─fonts</span><br><span class="line">│          │  │      element-icons<span class="selector-class">.b02bdc1</span><span class="selector-class">.ttf</span></span><br><span class="line">│          │  │      </span><br><span class="line">│          │  └─js</span><br><span class="line">│          │          <span class="number">0.105</span>cd4667842b0092158.js</span><br><span class="line">│          │          <span class="number">1.3</span>f78774435db7aa5de2a.js</span><br><span class="line">│          │          app.<span class="number">3</span>ec6fa4bebfb1bb58a2b.js</span><br><span class="line">│          │          app.<span class="number">3</span>ec6fa4bebfb1bb58a2b<span class="selector-class">.js</span><span class="selector-class">.gz</span></span><br><span class="line">│          │          manifest<span class="selector-class">.b0bb778337a7d07c6313</span><span class="selector-class">.js</span></span><br><span class="line">│          │          vendor<span class="selector-class">.bbf93d5282d3216eb30e</span><span class="selector-class">.js</span></span><br><span class="line">│          │          vendor<span class="selector-class">.bbf93d5282d3216eb30e</span><span class="selector-class">.js</span><span class="selector-class">.gz</span></span><br><span class="line">│          │          </span><br><span class="line">│          └─WEB-INF</span><br><span class="line">│                  web.xml</span><br><span class="line">│                  </span><br><span class="line">└─test</span><br><span class="line">        TestHello.java</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在创建的POM里面添加依赖<br> pom.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></span><br><span class="line"><span class="xml">  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>article<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>article<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>article Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--测试--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--spring--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- jdbc连接池 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 事务管理 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--spring测试用--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 注解扫描 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- MVC --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 切面，将日志记录，事务等分离开来 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- mybatis和spring结合用 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- mysql连接驱动 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 连接数据库 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- mybatis --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 转换json用 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- jackson转换json用 @ResponseBody默认调用jackson，将java对象转为json --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 分页插件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- javaHttp基础包 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 日志 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- slf4j要配合其他日志包运行，slf4j起个管理的作用 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>article<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 防止package打包不到XML--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- mybatis生成代码插件 --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="comment">&lt;!-- 生成文件的配置 --&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- maven插件 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>配置mybatisGeneratorConfig，需要连接数据库，<br> 将准备的sql文件导入数据库中<a href="vue_admin.sql">vue_admin.sql</a><br>generatorConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--&lt;properties resource="jdbc.properties"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--连接mysql的jar包--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">      <span class="attr">location</span>=<span class="string">"C:/Users/**/.m2/repository/mysql/mysql-connector-java/5.1.29/mysql-connector-java-5.1.29.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/vue_admin"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">userId</span>=<span class="string">"**"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">password</span>=<span class="string">"**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成model =》 数据层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.lvsen.test.model"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 生成mapper 存有mybatis的数据库操作xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.lvsen.test.mapping"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 存有mappper的接口类，mybatis会自动生成实体类，将mapper和dao连接起来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"cn.lvsen.test.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表的名字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_table"</span> <span class="attr">domainObjectName</span>=<span class="string">"TableData"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"t_user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置resources/spring/spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--扫描包，查注解--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.lvsen.test"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--映射器与适配器，去掉@ResponseBody就会出问题--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 静态资源放置地 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/**"</span> <span class="attr">location</span>=<span class="string">"static"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;mvc:resources mapping="/css/**" location="static" /&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 拦截器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/api/**"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.lvsen.test.interceptor.AuthInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:prefix</span>=<span class="string">"/"</span> <span class="attr">p:suffix</span>=<span class="string">".html"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置resources/spring/spring-mybatis.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--引入jdbc的配置文件--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--jdbc连接数据库基本配置--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--spring和mybatis结合的配置--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:cn/lvsen/test/mapping/*Mapper.xml"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="comment">&lt;!--少了这句话会导致空指针异常--&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--dao接口，sping会自动查找其中的类 dao ——&gt; 数据访问层 dao映射的mapper，去掉启动报错--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.lvsen.test.dao"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--对应上面id="sqlSessionFactory"--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>spring-mybatis.xml配置时用了<strong>jdbc.properties</strong>这是为了方便管理连接<br> resources/jdbc.properties的配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.<span class="attribute">driver</span>=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.<span class="attribute">url</span>=jdbc:mysql://localhost:3306/vue_admin?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="line">jdbc.<span class="attribute">username</span>=**</span><br><span class="line">jdbc.<span class="attribute">password</span>=**</span><br></pre></td></tr></table></figure></li><li><p>web.xml配置，web.xml是这个web项目的入口  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span> <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--spring和mybatis的配置文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mybatis.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--spring监听器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--解决乱码--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SpringEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--映射的路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SpringEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 声明静态资源类型，加入spring扫描 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--spring MVC 核心分发器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 首页，可以多个，根据顺来显示--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>SSM基本配置完了，其他功能需要的时候再加，现在新建文件夹  </p><ul><li>java/cn.xx.xx/controller  // controller层</li><li>java/cn.xx.xx/service // service层</li><li>java/cn.xx.xx/service/impl // service层接口的实现类</li><li>webapp/index.html</li></ul></li><li><p>在controller里面新建一个UserController类，<br>进行restAPI的书写,api使用url: <strong>api/user/hello</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(<span class="string">"api/user"</span>)</span><br><span class="line"><span class="keyword">public</span> class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = <span class="string">"hello"</span>, method = RequestMethod.GET) </span><br><span class="line">    @ResponseBody <span class="comment">// 要返回json数据</span></span><br><span class="line">    <span class="keyword">public</span> Map login(HttpSession httpSession) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, Object&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">try</span> &#123;</span><br><span class="line">          <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"errorCode"</span>, <span class="number">0</span>);</span><br><span class="line">          <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"message"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        &#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"errorCode"</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"errorMessage"</span>, <span class="string">"未知错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> <span class="built_in">map</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>一个接口写好，然后配置服务器启动项目<br>1.<img src="/2017/04/25/java-ssm/3.png" alt="3"><br>2.<img src="/2017/04/25/java-ssm/4.png" alt="4"><br>3.<img src="/2017/04/25/java-ssm/5.png" alt="5"><br>然后点击<strong>apply</strong> =&gt; <strong>OK</strong><br>项目启动，打开地址栏，追加输入<strong>api/user/hello</strong>，拿到数据OK，后台走通</p></li></ol><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><ol><li>后台暂时放置，开始写前端<strong><a href="https://github.com/slipkinem/vue-admin" target="_blank" rel="noopener">前端部分代码</a></strong><h4 id="前端框架用的VUE，UI框架用的饿了么开源的element-ui"><a href="#前端框架用的VUE，UI框架用的饿了么开源的element-ui" class="headerlink" title="前端框架用的VUE，UI框架用的饿了么开源的element_ui"></a>前端框架用的VUE，UI框架用的饿了么开源的element_ui</h4><ul><li>总概况：vue+vue-router+vue-resource+vuex+element_ui</li></ul></li><li><strong>用npm下载vue-cli</strong><ul><li>用vue-cli生成webpack项目骨架</li><li>npm install 下载所有依赖</li></ul></li><li></li></ol>]]></content>
      
      <categories>
          
          <category> 课外学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> java </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>所谓publish-subscribe</title>
      <link href="/2017/04/22/%E6%89%80%E8%B0%93publish-subscribe/"/>
      <content type="html"><![CDATA[<h2 id="所谓观察者模式-publish-subscribe"><a href="#所谓观察者模式-publish-subscribe" class="headerlink" title="所谓观察者模式 publish/subscribe"></a>所谓观察者模式 publish/subscribe</h2><ol><li>subscribe事件订阅/事件监听 就是将事件和事件的callback，<br>添加到一个需要监听执行事件队列里面<br> {<br>   eventName: [callback1, callback1],<br>   eventName: [callback]<br> }</li><li>接收到publish发布事件就是将subscribe的事件从队列拿出来执行</li><li>在外看来就像是一直在监测这个事件，然后接收到publish发布的，<br>执行监测的事件callback</li></ol>]]></content>
      
      <categories>
          
          <category> 课外学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-native进入姿势</title>
      <link href="/2017/04/22/react-native%E8%BF%9B%E5%85%A5%E5%A7%BF%E5%8A%BF/"/>
      <content type="html"><![CDATA[<h2 id="开始战斗"><a href="#开始战斗" class="headerlink" title="开始战斗"></a>开始战斗</h2><p>从react到react native, 已经走过许多时间。react native是一个高性能的用javascript开发app的框架。<br>准备学一点react，然后觉得不如直接学习react-native，就开始了react-native之路，从环境搭建到一个小DEMO，花了不少时间，主要是下载太麻烦</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>ide: 我选择idea，习惯了</li><li>电脑：win7的i5渣配置，所以先不打算进行ios开发</li><li>没有vpn，宽带是交话费送的10M联通宽带，网速还行1m/s</li><li>推荐给电脑安装<strong><a href="http://www.getwox.com/" target="_blank" rel="noopener">wox</a>和everything(wox插件就有)</strong>，方便寻找文件</li></ol><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="node环境"><a href="#node环境" class="headerlink" title="node环境"></a>node环境</h3><ol><li>下载安装<strong>nodeJs</strong>（最新的就行），为了防止环境变量有问题，不要修改安装目录</li><li>使用 node-v npm -v 看看有没有安装成功<a id="more"></a></li><li><p>注册淘宝镜像 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm config set registry https://registry.npm.taobao.org --global</span><br><span class="line">&gt; npm config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure></li><li><p>下载<strong>yarn</strong>，react-native默认使用yarn下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; npm i -g yarn</span><br><span class="line">&gt; yarn -v</span><br></pre></td></tr></table></figure></li><li><p>给<strong>yarn</strong>注册淘宝镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn config set registry https://registry.npm.taobao.org --global</span><br><span class="line">&gt; yarn config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure></li></ol><h3 id="react-native安装"><a href="#react-native安装" class="headerlink" title="react-native安装"></a>react-native安装</h3><ol><li><p>使用yarn下载react-native-cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn global add react-native-cli</span><br><span class="line">&gt; react-native --version</span><br></pre></td></tr></table></figure></li><li><p>创建项目,一直等待下载完成，生成的目录还是很清晰的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; react-native init rnDemo</span><br></pre></td></tr></table></figure><p><img src="/2017/04/22/react-native进入姿势/directory.jpg" alt="directory"></p></li><li><p>试着运行项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd rnDemo</span><br><span class="line">&gt; npm start</span><br></pre></td></tr></table></figure><p>命令行显示，8081端口开启服务。在浏览器输入<a href="localhost:8081" target="_blank" rel="noopener">localhost:8081</a>,显示<code>React Native packager is running.</code>，说明服务还是通畅的。可咱们要做安卓项目！所以继续使用命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; react-native run-android</span><br></pre></td></tr></table></figure><p>不出意外会挺慢，因为要下载gradle（gradle是安卓项目常用的构建工具，用来管理jar包和执行任务）和jar包，命令行会提示在此url下载文件<code>Download https://jcenter.bintray.com/com/android/tools/annotations/25.2.3/annotations-25.2.3.jar</code></p></li><li><p>因为网络的问题，所以给gradle配置阿里云maven（java常用的包管理工具，有一个下载的仓库，但很慢）镜像。进入<strong>.gradle</strong>文件夹，一般在<code>C:\Users\Administrator\.gradle</code>，使用wox就简单多了<br><img src="/2017/04/22/react-native进入姿势/wox.jpg" alt="wox"><br>在 <strong>.gradle</strong> 文件夹里面新建 <strong>init.gradle</strong> 文件，并写入下面代码，或<a href="init.gradle">点击下载init.gradle</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        <span class="keyword">def</span> REPOSITORY_URL = <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span></span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            <span class="keyword">if</span>(repo <span class="keyword">instanceof</span> MavenArtifactRepository)&#123;</span><br><span class="line">                <span class="keyword">def</span> url = repo.url.toString()</span><br><span class="line">                <span class="keyword">if</span> (url.startsWith(<span class="string">'https://repo1.maven.org/maven2'</span>) || url.startsWith(<span class="string">'https://jcenter.bintray.com/'</span>)) &#123;</span><br><span class="line">                    project.logger.lifecycle <span class="string">"Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL."</span></span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url REPOSITORY_URL</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继续运行命令<code>react-native run-android</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; react-native run-android</span><br></pre></td></tr></table></figure></li></ol><p>可以看到下载速度快了好多，但最后会发现报错<code>SDK location not found</code>，这是因为没有安装 <strong>android sdk</strong> ，接下来配置 <strong>android环境</strong></p><h3 id="android开发环境配置"><a href="#android开发环境配置" class="headerlink" title="android开发环境配置"></a>android开发环境配置</h3><ol><li>安装java环境，搜一下有N多教程</li><li>下载<strong>android studio</strong> 没有翻墙的话推荐使用<a href="https://pan.baidu.com/s/1jIyKHjK" target="_blank" rel="noopener">网盘下载</a></li><li>安装<strong>android studio</strong> 推荐使用默认安装一直点击<code>next</code>  </li><li>第一次启动会进入下面界面<br><img src="/2017/04/22/react-native进入姿势/androids.jpg" alt="androids"><ul><li>standard 标准配置，推荐第一次安装使用能够</li><li>custom 选择安装， 可以自己定制安装选项<br>由于是第一此安装就直接选用默认的<strong>standard</strong>安装，但是react-native官网推荐custom</li></ul></li><li>记得勾选<strong>Android Virtual Device</strong>，一直<strong>next</strong>，最后点击<strong>finished</strong>等待下载完成<br><img src="/2017/04/22/react-native进入姿势/avd.jpg" alt="avd"></li></ol><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>在电脑环境变量设置里面，点击新建，ANDROID_HOME sdk路径<br><img src="/2017/04/22/react-native进入姿势/android_home.jpg" alt="ANDROID_HOME"><br>然后再到环境变量 <strong>path</strong> 里面添加类似这样<br><code>C:\Users\Administrator\AppData\Local\Android\Sdk\tools</code><br><code>C:\Users\Administrator\AppData\Local\Android\Sdk\platform-tools</code><br>一定注意路径的正确性<br><img src="/2017/04/22/react-native进入姿势/tools.jpg" alt="tools"></p><h3 id="再次运行"><a href="#再次运行" class="headerlink" title="再次运行"></a>再次运行</h3><ol><li>运行<code>react-native run-android</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; react-native run-android</span><br></pre></td></tr></table></figure></li></ol><p>又提示报错关于 <code>[Android SDK Platform 23, Android SDK Build-Tools 23.0.1].</code>， 这是由于少了build-tools 23.0.1, 在sdk manager里面安装就行了<br><img src="/2017/04/22/react-native进入姿势/snap3555.jpg" alt="snap3555"><br><img src="/2017/04/22/react-native进入姿势/snap3556.jpg" alt="snap3556"><br>点击<strong>finished</strong></p><ol><li>运行<code>react-native run-android</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; react-native run-android</span><br></pre></td></tr></table></figure></li></ol><p>提示报错<code>com.android.builder.testing.api.DeviceException: No connected devices!</code>, 由于没连上设备导致的错误</p><h3 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h3><p>adb（连接devices的驱动）可以通过模拟器和真机进行，android studio带的模拟器不怎么好用，所以我选择用强大的<strong>genymotion</strong>进行开发</p><h4 id="下载genymotion免费版并启动"><a href="#下载genymotion免费版并启动" class="headerlink" title="下载genymotion免费版并启动"></a>下载genymotion免费版并启动</h4><ol><li>下载并安装<a href="https://pan.baidu.com/share/link?shareid=3943454172&amp;uk=3073382768#list/path=%2F" target="_blank" rel="noopener">genymotion免费版</a>,替换安装目录文件就免费了</li><li>由于<strong>genymotion</strong>依赖virtualbox，下载安装<a href="https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=virtualbox&amp;oq=genymotion%25E7%25A0%25B4%25E8%25A7%25A3%25E7%2589%2588&amp;rsv_pq=e656eb5a0011ec27&amp;rsv_t=715efDZI0lJ%2B1tsmUpCuiiAat7RfExGnvVtlkSWbKVbC%2BS9zwTu7ku7rueA&amp;rqlang=cn&amp;rsv_enter=1&amp;inputT=1128&amp;rsv_sug3=8&amp;rsv_sug1=8&amp;rsv_sug7=100&amp;bs=genymotion%E7%A0%B4%E8%A7%A3%E7%89%88" target="_blank" rel="noopener">virtualbox</a>就行了</li><li>以上安装好之后打开<strong>genymotion</strong>，根据提示添加一个设备并运行该安卓模拟器<br><img src="/2017/04/22/react-native进入姿势/gen.jpg" alt="gen"></li><li>安装完毕，选择一个添加好的虚拟机，并启动。 糟糕，不知什么原因报错了。<br><img src="/2017/04/22/react-native进入姿势/err.jpg" alt="err"><br><code>碰到这种报错不用怕，打开virtualBox，直接启动安装好的虚拟机。</code><br><img src="/2017/04/22/react-native进入姿势/verr.jpg" alt="verr"><br><code>可以看出来是virtualBox的配置有错误，那就打开配置信息</code><br><img src="/2017/04/22/react-native进入姿势/configerr.jpg" alt="configerr"><br><code>跟随黄色提示配置好virtualBox,继续启动在genymotion里面添加的设备，完美!</code><br><img src="/2017/04/22/react-native进入姿势/success.jpg" alt="success">  </li><li>在genymotion里面配置sdk路径<br><img src="/2017/04/22/react-native进入姿势/sdk.png" alt="sdk"></li><li>如果还是提示连接不上设备，就用adb连接一下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; adb devices</span><br><span class="line">&gt; adb connect 127.0.0.1</span><br><span class="line">&gt; adb devices</span><br></pre></td></tr></table></figure></li></ol><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><ol><li>各种配置都设置好了，继续运行<code>react-native run-android</code></li><li>尼玛又是error,这次明显的看出提示没有连接上js Service,得手动连接了<br><img src="/2017/04/22/react-native进入姿势/netErr.jpg" alt="netErr"><br><code>点击菜单 -&gt; Dev Setting -&gt; Debug server host</code><br><img src="/2017/04/22/react-native进入姿势/dev.jpg" alt="dev"><br><img src="/2017/04/22/react-native进入姿势/host.jpg" alt="host"><br><code>然后返回，reload一下</code><br><img src="/2017/04/22/react-native进入姿势/reload.jpg" alt="reload"><br><code>出现成功界面，可以愉快的开发了</code><br><img src="/2017/04/22/react-native进入姿势/devSuccess.jpg" alt="devSuccess"><br><strong>注意：在菜单里面点击 Enable Hot Reloading，这样就可以保存后实时刷新了</strong></li></ol><h3 id="正式开发，就写一个简单的底部导航路由"><a href="#正式开发，就写一个简单的底部导航路由" class="headerlink" title="正式开发，就写一个简单的底部导航路由"></a>正式开发，就写一个简单的底部导航路由</h3><p>用到底部导航package <a href="https://github.com/expo/react-native-tab-navigator" target="_blank" rel="noopener">react-native-tab-navigator</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn add react-native-tab-navigator</span><br></pre></td></tr></table></figure></p><p>修改<code>index.android.js</code>,给入口少搁点东西，不然看着恶心<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AppRegistry</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> RootApp <span class="keyword">from</span> <span class="string">'./app/RootApp'</span></span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'rnDemo'</span>, () =&gt; RootApp); <span class="comment">// rnDemo是项目的名称</span></span><br></pre></td></tr></table></figure></p><p>在根目录新建文件夹app，在app里面新建 RootApp.js、components/Home.js、components/Nice.js  </p><p>app/RootApp.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  View,</span><br><span class="line">  StyleSheet</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">import</span> TabNavigator <span class="keyword">from</span> <span class="string">'react-native-tab-navigator'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span></span><br><span class="line"><span class="keyword">import</span> Nice <span class="keyword">from</span> <span class="string">'./components/Nice'</span></span><br><span class="line"><span class="keyword">import</span> TabNavigatorItem <span class="keyword">from</span> <span class="string">"react-native-tab-navigator/TabNavigatorItem"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">RootApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      selectedTab: <span class="string">'home'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;TabNavigator&gt;</span><br><span class="line">          &lt;TabNavigatorItem</span><br><span class="line">            title=<span class="string">"Home"</span></span><br><span class="line">            onPress=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123;<span class="attr">selectedTab</span>: <span class="string">'home'</span>&#125;)&#125;</span><br><span class="line">            selected=&#123;<span class="keyword">this</span>.state.selectedTab === <span class="string">'home'</span>&#125;&gt;</span><br><span class="line">            &lt;Home/&gt;</span><br><span class="line">          &lt;<span class="regexp">/TabNavigatorItem&gt;</span></span><br><span class="line"><span class="regexp">          &lt;TabNavigatorItem</span></span><br><span class="line"><span class="regexp">            title="Nice"</span></span><br><span class="line"><span class="regexp">            onPress=&#123;() =&gt; this.setState(&#123;selectedTab: 'nice'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">            selected=&#123;this.state.selectedTab === 'nice'&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Nice/</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/TabNavigatorItem&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>TabNavigator&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">let styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">  container: &#123;</span></span><br><span class="line"><span class="regexp">    flex: 1,</span></span><br><span class="line"><span class="regexp">    backgroundColor: '#ccc'</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure></p><p>app/components/Home.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Text&gt;</span><br><span class="line">        我是Home</span><br><span class="line">      &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>app/components/Nice.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Nice</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Text&gt;</span><br><span class="line">        我是Nice</span><br><span class="line">      &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>大功告成<br><img src="/2017/04/22/react-native进入姿势/bigSuccess.jpg" alt="bigSuccess"></p>]]></content>
      
      <categories>
          
          <category> 自学历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> reactNative </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>angular-$rootScope.$new()</title>
      <link href="/2017/04/22/angular-rootScope-new/"/>
      <content type="html"><![CDATA[<h2 id="Scope实例上面有这么一个属性：-new"><a href="#Scope实例上面有这么一个属性：-new" class="headerlink" title="Scope实例上面有这么一个属性：$new()"></a>Scope实例上面有这么一个属性：$new()</h2><h3 id="new-isolate-parent"><a href="#new-isolate-parent" class="headerlink" title="$new(isolate, parent)"></a>$new(isolate, parent)</h3><p><code>所有scope都是通过$new创建</code></p><h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4><ol><li><p>参数一（isolate）设置是否为孤立作用域</p><ul><li>如果是<code>true</code>，则建立孤立作用域，孤立作用域直接和祖级作用域联系 <code>child = new Scope(); child.$root = this.$root</code></li><li>如果是<code>false</code>，则判断此<code>$rootScope</code>有没有子作用域，如果没有则建立一个子作用域构造函数，并且将这个子作用域的原型指向<code>this（</code>$rootScope =&gt; Scope的实例<code>）</code>,然后将<code>child = new this.$$ChildScope() child.__proto__ = Scope.prototype</code></li></ul></li><li><p>参数二设置要<code>new</code>的作用域的<code>parent</code>，如果不设置则将<code>parent = this</code>， 也就是将<code>new</code>的<code>child</code>挂载到<code>this(此$rootScope)上面，然后给</code>parent<code>的子作用域排序，有个判断如果设置了</code>isolate<code>并且</code>parent != this`,<strong>则作用域不监听$destory事件</strong></p></li><li><p>e.g:<br><code>var scope = $rootScope.$new()</code></p><h5 id="没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。"><a href="#没有指定参数，则1-将scope的父级指向-rootScope-2-将scope创建为-rootScope的子作用域，并在原型上继承-rootScope的所有属性方法，返回。" class="headerlink" title="没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。"></a>没有指定参数，则1.将scope的父级指向$rootScope, 2.将scope创建为$rootScope的子作用域，并在原型上继承$rootScope的所有属性方法，返回。</h5><p>`</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java用jdbc，servelet的一个小问题</title>
      <link href="/2017/04/21/java%E7%94%A8jdbc-servelet%E6%97%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <content type="html"><![CDATA[<ol><li>在用jdbc连接数据库的时候碰见一个tomcat抛得错误，<br><code>java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</code> ，<br>感觉不对，我已经在idea的Modules里面添加了mysql.jar的包，在测试的时候连接是正常的。<br>原来要将mysql驱动包复制到tomcat的lib文件夹。  </li><li>在连接驱动包的时候碰见这种写法<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code><br>原来这种写法是注册mysql依赖包，等同于<code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></li><li>maven：为了让依赖好管理， mybatis：为了让DML更简单，spring：为了让servlet更好用</li></ol>]]></content>
      
      <categories>
          
          <category> exception </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学习计划</title>
      <link href="/2017/04/19/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <content type="html"><![CDATA[<h2 id="学习计划清单"><a href="#学习计划清单" class="headerlink" title="学习计划清单"></a>学习计划清单</h2><p><strong>要强制按照计划来，不然总是盲目的不知道要做什么，感觉茫茫然的</strong>  </p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><ol><li><p>react react之前只是粗略的过了一遍，大概知道是什么原理，但没有真正做项目</p></li><li><p>vue-admin项目的继续扩展</p></li><li><p>研究bootstrap.js里面插件的实现，争取动手写一套UI插件</p></li></ol><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><ol><li>前端项目的后台全部由java来做，之前node.js写的后台也由java重构，使用java的spring</li></ol>]]></content>
      
      
        <tags>
            
            <tag> 课外学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DOM属性currentTarget</title>
      <link href="/2017/04/19/currentTarget/"/>
      <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getEventTrigger</span><span class="params">(event)</span></span></span></span><br><span class="line"><span class="undefined">  &#123; </span></span><br><span class="line"><span class="undefined">  x=event.currentTarget; </span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(event)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(event.currentTarget)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span> <span class="attr">onmousedown</span>=<span class="string">"getEventTrigger(event)"</span>&gt;</span></span><br><span class="line">Click on this paragraph. An alert box will</span><br><span class="line">show which element triggered the event.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点"><a href="#运行此代码会发现：-console-log-event-currentTarget-null-而直接打印currentTarget则返回当前节点" class="headerlink" title="运行此代码会发现： console.log(event) currentTarget:null  而直接打印currentTarget则返回当前节点"></a>运行此代码会发现： <strong>console.log(event) currentTarget:null</strong>  而直接打印currentTarget则返回当前节点</h3><h4 id="这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况"><a href="#这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况" class="headerlink" title="这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况"></a>这是由于打印event的时候currentTarget被重置为null了，用debug查看的话就不会出现null这种情况</h4>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> dom </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6版promise</title>
      <link href="/2017/04/18/es6%E7%89%88promise/"/>
      <content type="html"><![CDATA[<h2 id="es6版Promise"><a href="#es6版Promise" class="headerlink" title="es6版Promise"></a>es6版Promise</h2><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">'resolve'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result) <span class="comment">// resolve</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="Promise是一个构造函数，接受一个函数作为参数"><a href="#Promise是一个构造函数，接受一个函数作为参数" class="headerlink" title="Promise是一个构造函数，接受一个函数作为参数"></a><code>Promise</code>是一个构造函数，接受一个函数作为参数</h4><p>  这个函数接受两个参数：<br>  (1) resolve 成功的时候返回的数据 （履行承诺）<br>  (2) reject 失败的时候返回的数据 （拒绝承诺）</p><h4 id="Promise原型方法"><a href="#Promise原型方法" class="headerlink" title="Promise原型方法"></a><code>Promise</code>原型方法</h4><p>  (1) <code>then</code>注册成功后的回调<br>  (2) <code>catch</code>注册失败后的回调<br><a id="more"></a></p><h4 id="上源代码——由于使用es6所以用babel，点击看编译过的代码"><a href="#上源代码——由于使用es6所以用babel，点击看编译过的代码" class="headerlink" title="上源代码——由于使用es6所以用babel，点击看编译过的代码"></a>上源代码——由于使用es6所以用babel，<a href="https://github.com/slipkinem/jsTest/blob/master/promise/final/promise.dist.js" target="_blank" rel="noopener">点击看编译过的代码</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">util</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> isFunction(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'function'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> isArray(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> <span class="keyword">extends</span> <span class="title">util</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(executor) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承绑定，作为context调用父类的constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">super</span>(executor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Promise</span>.isFunction(executor)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'参数必须是一个函数'</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @description</span></span><br><span class="line"><span class="comment">     * 状态分为 PENDING  可以过度到RESOLVED或REJECTED</span></span><br><span class="line"><span class="comment">     *        RESOLVED</span></span><br><span class="line"><span class="comment">     *        REJECTED</span></span><br><span class="line"><span class="comment">     * @type &#123;string&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>._status = <span class="string">'PENDING'</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正确值</span></span><br><span class="line"><span class="comment">     * @type &#123;Object&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>._value = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误值</span></span><br><span class="line"><span class="comment">     * @type &#123;Object&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>._reason = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 储存错误回调</span></span><br><span class="line"><span class="comment">     * @type &#123;Array&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>._rejecteds = []</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正确回调的方法集 </span></span><br><span class="line"><span class="comment">     * @type &#123;Array&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>._deferreds = []</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在class中 constructor里面的函数无法直接访问this</span></span><br><span class="line"><span class="comment">     * 为了形成private，所以不放外面</span></span><br><span class="line"><span class="comment">     * @type &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行承诺的函数</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 异步，为了让then先执行，注册进回调</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (_this._status === <span class="string">'PENDING'</span>) &#123;</span><br><span class="line">            _this._status = <span class="string">'RESOLVED'</span></span><br><span class="line">            _this._value = value</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 循环执行所有的回调</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            _this._deferreds.forEach(<span class="function">(<span class="params">deferred</span>) =&gt;</span> &#123;</span><br><span class="line">              deferred(value)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (_this._status === <span class="string">'PENDING'</span>) &#123;</span><br><span class="line">            _this._status = <span class="string">'REJECTED'</span></span><br><span class="line">            _this._reason = reason</span><br><span class="line"></span><br><span class="line">            _this._rejecteds.forEach(<span class="function">(<span class="params">rejected</span>) =&gt;</span> &#123;</span><br><span class="line">              rejected(reason)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * resolve方法</span></span><br><span class="line"><span class="comment">   * @example Promise.resolve('test').then(function(result)&#123; result // test &#125;)</span></span><br><span class="line"><span class="comment">   * @param value</span></span><br><span class="line"><span class="comment">   * @returns &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * all方法 当需要许多promise一起执行的时候用，最后返回一个存有所有promise返回值的数组</span></span><br><span class="line"><span class="comment">   * 当一个promise reject掉了，认为此all方法执行失败，进入reject</span></span><br><span class="line"><span class="comment">   * @param promises</span></span><br><span class="line"><span class="comment">   * @returns &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> all(promises) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Promise</span>.isArray(promises)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'promises 必须是一个数组'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个Promise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> result = [],</span><br><span class="line">        len = promises.length</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 将所有的返回值存储起来</span></span><br><span class="line"><span class="comment">       * @param value</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">resolveAll</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        result.push(value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (--len === <span class="number">0</span>) &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      promises.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promise</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将成功后的加入result数组</span></span><br><span class="line"><span class="comment">         * 一旦有一个失败，则直接返回失败</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        promise.then(resolveAll, reject)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 方便使用，封装catch方法</span></span><br><span class="line"><span class="comment">   * @param onRejected</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 重点方法，then</span></span><br><span class="line"><span class="comment">   * @param onFulfilled</span></span><br><span class="line"><span class="comment">   * @param onRejected</span></span><br><span class="line"><span class="comment">   * @returns &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次执行then都会返回一个promise供链式调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> returnedValue = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 如果是RESOLVED状态说明执行了过resolve函数，this.value是有值的</span></span><br><span class="line"><span class="comment">       * e.g. Promise.resolve('resolve').then(function(result)&#123;&#125;)</span></span><br><span class="line"><span class="comment">       * 最主要看onFulfilled返回值是什么</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * _RESOLVED</span></span><br><span class="line"><span class="comment">       * @param value</span></span><br><span class="line"><span class="comment">       * @private</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">_RESOLVED</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 取得onFulfilled的返回值，判断是否返回一个promise</span></span><br><span class="line"><span class="comment">         * 回调方式的then</span></span><br><span class="line"><span class="comment">         * @example</span></span><br><span class="line"><span class="comment">         * new Promise(function(resolve, reject)&#123;</span></span><br><span class="line"><span class="comment">         *  resolve('test')</span></span><br><span class="line"><span class="comment">         * &#125;)</span></span><br><span class="line"><span class="comment">         *  .then(function(result)&#123;</span></span><br><span class="line"><span class="comment">         *    return new Promise(function(resolve, reject)&#123;</span></span><br><span class="line"><span class="comment">         *      resolve(result + 'test')</span></span><br><span class="line"><span class="comment">         *    &#125;)</span></span><br><span class="line"><span class="comment">         *      .then()</span></span><br><span class="line"><span class="comment">         *  &#125;)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        returnedValue = <span class="built_in">Promise</span>.isFunction(onFulfilled) &amp;&amp; onFulfilled(value) || value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (returnedValue &amp;&amp; returnedValue <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">            returnedValue.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">              resolve(value)</span><br><span class="line">            &#125;, (reason) =&gt; &#123;</span><br><span class="line">              reject(reason)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resolve(returnedValue)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 失败的错误</span></span><br><span class="line"><span class="comment">       * @param reason</span></span><br><span class="line"><span class="comment">       * @private</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">_REJECTED</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        returnedValue = <span class="built_in">Promise</span>.isFunction(onRejected) &amp;&amp; onRejected(reason) || reason</span><br><span class="line"></span><br><span class="line">        reject(returnedValue)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 直接调用resolve的情况</span></span><br><span class="line"><span class="comment">       * @example</span></span><br><span class="line"><span class="comment">       * Promise.resolve('test')</span></span><br><span class="line"><span class="comment">       *  .then(function() &#123;&#125;)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>._status === <span class="string">'RESOLVED'</span>) &#123;</span><br><span class="line">        _RESOLVED(<span class="keyword">this</span>._value)</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>._status === <span class="string">'REJECTED'</span>) &#123;</span><br><span class="line">        _REJECTED(<span class="keyword">this</span>._reason)</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>._status === <span class="string">'PENDING'</span>) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * e.g. new Promise().then(function(result)&#123;&#125;)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>._deferreds.push(_RESOLVED)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._rejecteds.push(_REJECTED)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将类返回，外面用babel编译</span></span><br><span class="line"><span class="comment"> * @type &#123;Promise&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 小轮子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> es6 </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>angular权威指南笔记</title>
      <link href="/2017/04/14/angular%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0/"/>
      <content type="html"><![CDATA[<h4 id="angular权威指南笔记"><a href="#angular权威指南笔记" class="headerlink" title="angular权威指南笔记"></a>angular权威指南笔记</h4><ol><li><p>$interpolate——服务插值表达式，可以设置插值表达式中的数据并<code>$interpolateProvider</code> 可以自定义 <strong>flag  =&gt; $x$</strong></p></li><li><p>orderBy——排序：给显示的文本排序</p></li></ol><a id="more"></a><ol><li><p><code>$parsers</code><br>当用户同控制器进行交互，并且<code>ngModelController</code><br>中的<code>$setViewValue()</code>方法被调用时，<br><code>$parsers</code>数组中的函数会以流水线的形式被逐个调用。<br>第一个<code>$parse</code>被调用后，执行结果会传<br>递给第二个<code>$parse</code>，以此类推</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'myApp'</span>)</span><br><span class="line">  .directive(<span class="string">'oneToTen'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="keyword">require</span>: <span class="string">'?ngModel'</span>,</span><br><span class="line">      link: <span class="function"><span class="keyword">function</span><span class="params">(scope, ele, attrs, ngModel)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!ngModel) <span class="keyword">return</span>;</span><br><span class="line">          ngModel.$parsers.unshift(</span><br><span class="line">          <span class="function"><span class="keyword">function</span><span class="params">(viewValue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> i = parseInt(viewValue);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            ngModel.$setValidity(<span class="string">'oneToTen'</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> viewValue;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ngModel.$setValidity(<span class="string">'oneToTen'</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> undefined;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>$formatters</strong><br>当绑定的<code>ngModel</code>值发生了变化，并经过<code>$parsers</code><br>数组中解析器的处理后，这个值会被传递<br>给<code>$formatters</code>流水线。同<code>$parsers</code><br>数组可以修改表单的合法性状态类似， <code>$formatters</code>中的函<br>数也可以修改并格式化这些值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'myApp'</span>)</span><br><span class="line">    .directive(<span class="string">'oneToTen'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="keyword">require</span>: <span class="string">'?ngModel'</span>,</span><br><span class="line">          link: <span class="function"><span class="keyword">function</span><span class="params">(scope, ele, attrs, ngModel)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!ngModel) <span class="keyword">return</span>;</span><br><span class="line">            ngModel.$formatters.unshift(<span class="function"><span class="keyword">function</span><span class="params">(v)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> $filter(<span class="string">'number'</span>)(v);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>表单验证：<code>ngModelController.$我是自定义</code><br> 取出 <code>form_name.input_name.$我是自定义</code><br> angular可以通过<code>form_name.input_name.XX</code><br> 拿到在<code>directive</code>里面给<code>ngModelController</code>自定义的布尔值<br> 从而可以通过判断来进行show/hide的表单验证</p></li><li><p>用属性声明指令比较好</p></li><li><p>指令<br><strong>@</strong> 绑定一次性显示的字符串<br><strong>=</strong> 双向绑定会获取作用域上面的值<br><strong>&amp;</strong> 绑定事件<br><strong>yourAttr: ‘@myAttr’</strong> 在<code>html</code>用<code>myAttr</code>，在指令中还是用<code>yourAttr</code></p></li><li><p><code>ng-include</code><br>会创建一个作用域，根据作用域原型继承原理，子作用域能访问父级的值，而反过来就不行了<br>所以不能在父级作用域操作<code>ng-include</code>中的数据，导致无法正常进行<code>$watch</code><br>应该给<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类似的指令还有 ```ng-controller ng-app</span><br></pre></td></tr></table></figure></p></li><li><p>如要避免插值字符串{&#123; &#125;}为渲染完成闪烁问题，请使用<code>ng-cloak</code>指令</p></li><li><p>ng-attr-(suffix)<br>如使用svg的时候报错，就是用前缀来避免</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; cx &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span> // 报错</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">ng-attr-cx</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; cx &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span>  // OK</span></span><br></pre></td></tr></table></figure></li><li><p>指令的生命周期开始于<code>$compile</code>结束于<code>link方法</code></p></li><li><p>指令API</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">.directive(<span class="string">''</span>, [<span class="string">''</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Runs during compile</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">          name: <span class="string">''</span>,  `指令名称`</span><br><span class="line"></span><br><span class="line">          priority: <span class="number">1</span>, `加载优先级`</span><br><span class="line"></span><br><span class="line">          terminal: <span class="keyword">true</span>, `是否让优先级以下的指令不运行`</span><br><span class="line"></span><br><span class="line">          scope: &amp;<span class="comment">#123; &amp;#125;, // &amp;#123; &amp;#125; = isolate, true = child, false/undefined = no change</span></span><br><span class="line">          `作用域，如果是<span class="keyword">true</span>则不让外部继承，外部读不到</span><br><span class="line">            如果是对象则是隔离作用域（作用域不传递）</span><br><span class="line">            具有隔离作用域的指令最主要的使用场景是创建可复用的组件，组件可以在未知上下文中使</span><br><span class="line">              用，并且可以避免污染所处的外部作用域或不经意地污染内部作用域`</span><br><span class="line"></span><br><span class="line">          controller: <span class="function"><span class="keyword">function</span><span class="params">($scope, $element, $attrs, $transclude)</span> &amp;#123</span>; &amp;<span class="comment">#125;,</span></span><br><span class="line"></span><br><span class="line">          `指令的控制`</span><br><span class="line">          <span class="keyword">require</span>: <span class="string">'ngModel'</span>, <span class="comment">// Array = multiple requires,   </span></span><br><span class="line">                             <span class="comment">// ? = optional（指找不到控制器传递null）,   </span></span><br><span class="line">                            <span class="comment">// ^ = check parent elements</span></span><br><span class="line">                             <span class="comment">// PS:可以在link方法的第四个参数指向该指令的controller</span></span><br><span class="line"></span><br><span class="line">          restrict: <span class="string">'A'</span>, <span class="comment">// E = Element,   </span></span><br><span class="line">                        <span class="comment">// A = Attribute,   </span></span><br><span class="line">                       <span class="comment">// C = Class,  </span></span><br><span class="line">                      <span class="comment">// M = Comment</span></span><br><span class="line">                     <span class="comment">// 声明方式</span></span><br><span class="line">                     </span><br><span class="line">          template: <span class="string">''</span>, <span class="comment">// 字符串</span></span><br><span class="line">          </span><br><span class="line">          templateUrl: <span class="string">''</span>, <span class="comment">// 指令html的地址</span></span><br><span class="line">          </span><br><span class="line">          replace: <span class="keyword">true</span>, <span class="comment">// 用html标签完全替代此指令</span></span><br><span class="line">          </span><br><span class="line">          transclude: <span class="keyword">true</span>, </span><br><span class="line">               <span class="comment">// 如果为true则无法正常监听数据变化，被用来，</span></span><br><span class="line">              <span class="comment">//  只有当你希望创建一个可以包含任意内容的指令时， </span></span><br><span class="line">             <span class="comment">//  才使用transclude: true。</span></span><br><span class="line">            <span class="comment">//  配合ng-transclude插进去</span></span><br><span class="line">          </span><br><span class="line">          compile: <span class="function"><span class="keyword">function</span><span class="params">(tElement, tAttrs,   </span></span></span><br><span class="line"><span class="function"><span class="params">                        function transclude<span class="params">(  </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                      </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                        function<span class="params">(scope, cloneLinkingFn)</span>&#123;   </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                      </span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">                          return function linking<span class="params">(scope, elm, attrs)</span>&amp;#<span class="number">123</span>; &amp;#<span class="number">125</span>;&#125;)</span>)</span>,</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">        <span class="title">link</span>: <span class="title">function</span><span class="params">($scope, iElm, iAttrs, controller)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        &#125;])</span><br></pre></td></tr></table></figure></li><li><p>Angular生命周期</p><ol><li>编译阶段： 遍历整个HTML，查找处理指令，遍历指令里面所有的模板，此时还没有数据绑定，<br>ng-repeat和ng-include类似的就会在在此时进行操作，减少开销</li><li>compile：在数据放入指令之前安全操作DOM</li><li>pre-link：将作用域与DOM连接起来之前操作dom，不安全的转换DOM</li><li>post-link: 负责事件监听器，监听数据和实时的DOM操作，如果需要性能，用compile</li><li>destroy</li></ol></li><li><p>ngModel </p><ul><li>要访问<code>ngModelController</code>必须在指令里面require</li><li>不要有隔离作用域，隔离作用域会导致无法更新外部绑定的值<ul><li>$viewValue 获取ngModel的值</li><li>$setViewValue 设置ngModel的值，需要手动触发<code>$digest</code>循环</li><li>$render自定义渲染，会在<code>$parser</code>流水线执行完后调用，慎用</li><li>$parsers：数组，处理加工ngModel数据，ngModel从DOM读出来的值会被当参数传入，到数据模型</li><li>$formatters 数组，在数据模型变的时候函数一一调用</li><li>$viewChangeListeners 无需<code>$watch</code>函数不需要返回值，视图中的值变化时一一调用</li><li>$error 没有通过验证的信息</li><li>$pristine 是否对控件没有交互过</li><li>$dirty 用户是否交互过</li><li>$valid 是否正确 $setValidity设置</li><li>$invalid 是否错误</li></ul></li></ul></li><li><p>constant会在所有配置config之前执行。config: 模块加载时会执行此函数</p></li><li><p>run 类main函数，在注入器创建之后被执行，是第一个被执行的方法，一般篇日志路由事件监听器<br>每次路由改变时执行run方法</p></li><li><p>路由<br>ng-view 最高权限指令同一元素只会运行ng-view<br>ng-view运行顺序<br>触发$routeChangeSuccess后试图会更新<br>模板会通过路由与ng-view关联</p><ol><li>创建一个新作用域</li><li>移除上一个视图，同时清除作用域</li><li>关联当前模板</li><li>如果路由中定义的controller则与当前作用域关联起来</li><li>触发$viewContentLoaded</li><li>调用onload指定的函数（如果有）</li></ol><p><strong>router的resolve属性，$injector会将声明的key添加进依赖，并能注入</strong></p><p><strong>$location相当于window.location的封装，但只针对视图，不能针对全局浏览器窗口</strong></p></li><li><p>依赖注入</p><ul><li>对象通常过的其控制权的方式</li><li>在内部创建依赖；</li><li>通过全局变量进行引用；</li><li>在需要的地方通过参数进行传递</li></ul><p>angular依赖注入使用$injector来管里依赖关系和实例化<br>包括模块，指令，控制器的注入<br>在运行时， 任何模块启动时$injector都会负责实例化，并将其需要的所有依赖传递进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'myApp'</span>, [])</span><br><span class="line">     .factory(<span class="string">'greeter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">         greet: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;alert(msg);&#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     .controller(<span class="string">'MyController'</span>,</span><br><span class="line">       <span class="function"><span class="keyword">function</span>(<span class="params">$scope, greeter</span>) </span>&#123;</span><br><span class="line">         $scope.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         greeter.greet(<span class="string">"Hello!"</span>);</span><br><span class="line">       &#125;;</span><br><span class="line">     &#125;);</span><br><span class="line">     </span><br><span class="line">     &lt;div ng-app=<span class="string">"myApp"</span>&gt;</span><br><span class="line">       &lt;div ng-controller=<span class="string">"MyController"</span>&gt;</span><br><span class="line">         &lt;button ng-click=<span class="string">"sayHello()"</span>&gt;Hello&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">       &lt;/</span>div&gt;</span><br><span class="line">     &lt;<span class="regexp">/div</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="angular加载过程"><a href="#angular加载过程" class="headerlink" title="angular加载过程"></a>angular加载过程</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 使用注入器加载应用</span><br><span class="line">var injector = angular.injector([<span class="string">'ng'</span>, <span class="string">'myApp'</span>]);</span><br><span class="line"><span class="regexp">//</span> 通过注入器加载<span class="variable">$controller</span>服务： var <span class="variable">$controller</span> = injector.get(<span class="string">'$controller'</span>);</span><br><span class="line">var scope = injector.get(<span class="string">'$rootScope'</span>).<span class="variable">$new</span>();</span><br><span class="line"><span class="regexp">//</span> 加载控制器并传入一个作用域，同AngularJS在运行时做的一样</span><br><span class="line">var MyController = <span class="variable">$controller</span>(<span class="string">'MyController'</span>, &#123;<span class="variable">$scope</span>: scope&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>angular通过<strong>annotate</strong>函数将greeter从参数列表中提取出来<br>如果没有加[]进行显式的声明，那么ng就会通过参数来获取依赖关系</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">injector.annotate(<span class="function"><span class="keyword">function</span><span class="params">($q, myService)</span></span>&#123; &#125;)</span><br><span class="line"><span class="comment">// annotate会返回被注入目标中的服务的名称，从而进行匹配</span></span><br></pre></td></tr></table></figure></li><li><p>injector.invoke(func($q)) 调用方法, fn.apply(self, args)<br>将参数列表转化成实例后的函数在进行调用<br>大概如此：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fucker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.getFucker = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'motherfucker'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoke</span>(<span class="params">fn, self</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一般是['dep1', 'dep2', func]</span></span><br><span class="line">  <span class="comment">// 会找寻依赖对应的参数函数并通过方法将其实例化</span></span><br><span class="line">  <span class="comment">// 调用func</span></span><br><span class="line">  fn.apply(self, [<span class="keyword">new</span> Fucker()])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">invoke(<span class="function"><span class="keyword">function</span> (<span class="params">fucker</span>) </span>&#123;</span><br><span class="line">  fucker.getFucker() <span class="comment">// motherfucker</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>分析ng-include为什么会导致无法正常双向绑定</p><ul><li>ng-include指令会生成一个作用域 (child)</li><li>ng-include父节点的作用域（parent）</li><li>parent.flag = “test” 根据原型继承原理 child.<em>proto</em>.flag = “test”</li><li>当parent.flag变成”dev” 则child.<em>proto</em>.flag = “dev”</li><li>如果child.flag = “product” 则 child.flag 与 parent.flag 失去联系</li><li>解决这种问题需要，将要传递的属性变为对象形式<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  function Parent() &#123;</span><br><span class="line">    this<span class="selector-class">.face</span> = <span class="string">"哈哈"</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Parent<span class="selector-class">.prototype</span> = &#123;</span><br><span class="line">    constructor: Parent,</span><br><span class="line">  </span><br><span class="line">    <span class="variable">$new</span>: function () &#123;</span><br><span class="line">      <span class="selector-tag">var</span> child</span><br><span class="line">  </span><br><span class="line">      this.$<span class="variable">$childScope</span> = function () &#123;</span><br><span class="line">        this.<span class="variable">$id</span> = <span class="number">112212</span></span><br><span class="line">      &#125;</span><br><span class="line">      this.$<span class="variable">$childScope</span><span class="selector-class">.prototype</span> = this</span><br><span class="line">      child = new this.$<span class="variable">$childScope</span>()</span><br><span class="line">  </span><br><span class="line">      return child</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">var</span> parentScope = new Parent()</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">var</span> childScope = parentScope.<span class="variable">$new</span>()</span><br><span class="line">  </span><br><span class="line">console.log(</span><br><span class="line">  [parentScope<span class="selector-class">.face</span>, parentScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span>],</span><br><span class="line">  [childScope<span class="selector-class">.face</span>, childScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span>]</span><br><span class="line">) <span class="comment">// ["哈哈", "哈哈"] ["哈哈", "哈哈"]</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">parentScope<span class="selector-class">.face</span> = <span class="string">"test"</span></span><br><span class="line">parentScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span> = <span class="string">"test"</span></span><br><span class="line">console.log(</span><br><span class="line">  [parentScope<span class="selector-class">.face</span>, parentScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span>],</span><br><span class="line">  [childScope<span class="selector-class">.face</span>, childScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span>]</span><br><span class="line">) <span class="comment">// ["test", "test"] ["test", "test"]</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">childScope<span class="selector-class">.face</span> = <span class="string">"我是谁"</span></span><br><span class="line">childScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span> = <span class="string">"我是谁"</span></span><br><span class="line">console.log(</span><br><span class="line">  [parentScope<span class="selector-class">.face</span>, parentScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span>],</span><br><span class="line">  [childScope<span class="selector-class">.face</span>, childScope<span class="selector-class">.fixed</span><span class="selector-class">.face</span>]</span><br><span class="line">)<span class="comment">// ["test", "我是谁"] ["我是谁", "我是谁"]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>$scope生命周期</p><ul><li>创建</li><li>创建控制器或指令时，angular会用<code>$injector</code>创建一个作用域，并在新建的控制器指令中将作用域传递进去<ul><li><code>$scope</code>会通过<code>$new</code>创建通过原型与父级保持联系</li></ul></li><li>链接</li><li>用$watch将数据监听</li><li>更新</li><li>当$watch监听到变化，触发回调</li><li>销毁</li><li>视图不需要会销毁自己</li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> 课外学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-cli创建的任务和后台交互cookie及restAPI处理</title>
      <link href="/2017/04/14/vue-cli%E5%88%9B%E5%BB%BA%E7%9A%84%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%90%8E%E5%8F%B0%E4%BA%A4%E4%BA%92cookie%E5%8F%8ArestAPI%E5%A4%84%E7%90%86/"/>
      <content type="html"><![CDATA[<h1 id="在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie"><a href="#在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie" class="headerlink" title="在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie"></a>在写vue和JAVA后台进行交互的时候，后端总是拿不到前端的cookie</h1><h2 id="session简述"><a href="#session简述" class="headerlink" title="session简述"></a>session简述</h2><h3 id="什么是session？"><a href="#什么是session？" class="headerlink" title="什么是session？"></a>什么是session？</h3><ul><li>session是服务器储存信息的一种方式，一般称之为会话，<br>以java为例<code>request.getSession().setAttribute(key, value)</code>在创建session实例时会生成一个唯一的ID，浏览器发送请求时，<br>会将set-cookie返回给浏览器，浏览器自动存储在cookie中，<br>在tomcat中，此Cookie叫做JSESSIONID</li><li>session关键在于sessionID所以不用cookie存也是可以的，比如可以放在request param里面，只要需要时前台发过来就行<a id="more"></a><h3 id="什么是cookie？"><a href="#什么是cookie？" class="headerlink" title="什么是cookie？"></a>什么是cookie？</h3></li><li>cookie是客户端（浏览器端）存储信息的一种方式，服务器可以设置浏览器set-cookie标头<br>浏览器收到标头与数值，会以文件的形式存在与计算机中。浏览器发送请求时会自动将cookie发给服务端 </li></ul><h4 id="cookie的属性-domain和path"><a href="#cookie的属性-domain和path" class="headerlink" title="cookie的属性 domain和path"></a>cookie的属性 domain和path</h4><ul><li><p>domain：domain表示的是cookie所在的域，默认为请求的地址，如网址为<a href="http://www.jb51.net/test/test.aspx，" target="_blank" rel="noopener">www.jb51.net/test/test.aspx，</a><br>那么domain默认为<a href="http://www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，" target="_blank" rel="noopener">www.jb51.net。而跨域访问，如域A为t1.test.com，域B为t2.test.com，</a><br>那么在域A生产一个令域A和域B都能访问的cookie就要将该cookie的domain设置为.test.com；<br>如果要在域A生产一个令域A不能访问而域B能访问的cookie就要将该cookie的domain设置为t2.test.com。</p></li><li><p>path: path表示cookie所在的目录，如baidu.com，cookie默认为根目录’/‘。baidu.com/wenku/，则path=/wenku/；<br>如果在biadu.com/wenku/下面设置set-cookie，则在baidu.com下面浏览器会因为path不对应，导致在baidu.com下set-cookie失败<br><img src="/2017/04/14/vue-cli创建的任务和后台交互cookie及restAPI处理/chrome下cookie.png" alt="chrome下cookie">  </p></li></ul><h3 id="session的流程"><a href="#session的流程" class="headerlink" title="session的流程"></a>session的流程</h3><ol><li>request.getSession().setAttribute(“username”, “listen”)</li><li>在http response header里面设置set-cookie返回头 set-cookie: JSESSIONID=xxxxxxxx;path=/;</li><li>浏览器看到set-cookie信息，并且设置的domain和path与浏览器当前一致，否则等待匹配的path和domain，存储以后会自动清除掉set-cookie</li><li>浏览器向服务端发送请求，将存储的cookie以key=value的形式放到请求头里面</li><li>服务端获取session request.getSession().getAttribute(“username”)<ul><li>从request请求头里面获取JSESSIONID，并找到与之对称的session实例，从此实例里面获取username</li><li>一个请求session对应一个实例，sessionId是区分实例的关键</li></ul></li></ol><h3 id="回到问题"><a href="#回到问题" class="headerlink" title="回到问题"></a>回到问题</h3><ul><li>现在代理服务器的URI是 localhost:8080, api服务器URI是localhost:8084/articlepr/</li><li>api服务器设置session时，set-cookie是这样set-cookie:JSESSIONID=xxxx;path=/articlepr/;</li><li>现set-cookie的domain和浏览器URI（代理服务器）都为localhost，而path不一样，所以会导致set-cookie浏览器存储cookie失败，后台也就拿不到JSESSIONID了</li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>既然是path不一样就修改path</p><ol><li>方案 后台修改path，还得让后台搞，麻烦</li><li><p>方案 给代理服务器加上path后缀，使其和api服务器一样，但是这样对proxyTable有一点副作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = app.listen(port, function (err) &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    console.log(err)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  var uri = `http://localhost:$&#123;port&#125;/articlepr/`</span><br><span class="line">  console.log(&apos;Listening at &apos; + uri + &apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">  // when env is testing, don&apos;t need open it</span><br><span class="line">  if (process.env.NODE_ENV !== &apos;testing&apos;) &#123;</span><br><span class="line">    opn(uri)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>方案 代理服务器重写path, 现使用的方式，不麻烦后台，不修改其他东西</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">options</span> = proxyTable[ctx]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (typeof <span class="keyword">options</span> === <span class="string">'string'</span>) &#123;</span><br><span class="line">   <span class="keyword">options</span> = &#123;</span><br><span class="line">     target: <span class="keyword">options</span>,</span><br><span class="line">     changeOrigin: <span class="keyword">true</span>,</span><br><span class="line"></span><br><span class="line">     onProxyRes(proxyRes, req, res) &#123;</span><br><span class="line">     proxyRes.headers[<span class="string">'set-cookie'</span>] = </span><br><span class="line">       [].slice.<span class="keyword">call</span>(proxyRes.headers[<span class="string">'set-cookie'</span>] || <span class="string">''</span>)  </span><br><span class="line">       .map(item =&gt; &#123;</span><br><span class="line">         <span class="keyword">return</span> item.replace(<span class="regexp">/Path=\/.*?;/</span>, <span class="string">'Path=/;'</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><p>这段代码就是将proxyRes.headers[‘set-cookie’]的path=/xx 转变成 path=/</p><h3 id="有时候在做代理请求的时候，需要拦截处理req的设置，"><a href="#有时候在做代理请求的时候，需要拦截处理req的设置，" class="headerlink" title="有时候在做代理请求的时候，需要拦截处理req的设置，"></a>有时候在做代理请求的时候，需要拦截处理req的设置，</h3><p>查看<strong>http-proxy-middleware</strong>的文档，可以用filter做拦截，代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(proxyMiddleware(<span class="function">(<span class="params">pathName, req</span>) =&gt;</span> &#123;</span><br><span class="line">    pathName = req.originalUrl = req.url = <span class="string">`<span class="subst">$&#123;rootAPI&#125;</span><span class="subst">$&#123;req.url&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pathName.match(ctx)</span><br><span class="line">  &#125;, options))</span><br></pre></td></tr></table></figure></p><h4 id="最后vue-proxy这块的总代码："><a href="#最后vue-proxy这块的总代码：" class="headerlink" title="最后vue proxy这块的总代码："></a>最后vue proxy这块的总代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(proxyTable).forEach(<span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> options = proxyTable[ctx]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'string'</span>) &#123;</span><br><span class="line">    options = &#123;</span><br><span class="line">      target: options,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      onProxyRes(proxyRes, req, res) &#123;</span><br><span class="line">        proxyRes.headers[<span class="string">'set-cookie'</span>] = </span><br><span class="line">          [].slice.call(proxyRes.headers[<span class="string">'set-cookie'</span>] || <span class="string">''</span>)  </span><br><span class="line">            .map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> item.replace(<span class="regexp">/Path=\/.*?;/</span>, <span class="string">'Path=/;'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  app.use(proxyMiddleware(<span class="function">(<span class="params">pathName, req</span>) =&gt;</span> &#123;</span><br><span class="line">    pathName = req.originalUrl = req.url = <span class="string">`<span class="subst">$&#123;rootAPI&#125;</span><span class="subst">$&#123;req.url&#125;</span>`</span>    </span><br><span class="line">    <span class="comment">// 可以在此处进行处理request请求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pathName.match(ctx)</span><br><span class="line">  &#125;, options))</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 课外学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
            <tag> cookie </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
